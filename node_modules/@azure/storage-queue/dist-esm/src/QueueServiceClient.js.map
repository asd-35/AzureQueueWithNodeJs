{"version":3,"file":"QueueServiceClient.js","sourceRoot":"","sources":["../../src/QueueServiceClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  getDefaultProxySettings\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport {\n  ListQueuesIncludeType,\n  QueueCreateResponse,\n  QueueDeleteResponse,\n  QueueItem,\n  QueueServiceProperties,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsResponse,\n  ServiceListQueuesSegmentResponse,\n  ServiceSetPropertiesResponse\n} from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Service } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { appendToURLPath, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\nimport { QueueClient, QueueCreateOptions, QueueDeleteOptions } from \"./QueueClient\";\n\n/**\n * Options to configure {@link QueueServiceClient.getProperties} operation\n *\n * @export\n * @interface ServiceGetPropertiesOptions\n */\nexport interface ServiceGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.setProperties} operation\n *\n * @export\n * @interface ServiceSetPropertiesOptions\n */\nexport interface ServiceSetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceSetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.getStatistics} operation\n *\n * @export\n * @interface ServiceGetStatisticsOptions\n */\nexport interface ServiceGetStatisticsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceGetStatisticsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure Queue Service - List Queues Segment operation\n *\n * See:\n * - {@link QueueServiceClient.listSegments}\n * - {@link QueueServiceClient.listQueuesSegment}\n * - {@link QueueServiceClient.listItems}\n *\n * @interface ServiceListQueuesSegmentOptions\n */\ninterface ServiceListQueuesSegmentOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListQueuesSegmentOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only queues\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies the maximum number of queues\n   * to return. If the request does not specify maxPageSize, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxPageSize, or than the default of 5000.\n   */\n  maxPageSize?: number;\n  /**\n   * Include this parameter to\n   * specify that the queue's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListQueuesIncludeType;\n}\n\n/**\n * Options to configure {@link QueueServiceClient.listQueues} operation\n *\n * @export\n * @interface ServiceListQueuesOptions\n */\nexport interface ServiceListQueuesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof ServiceListQueuesOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Filters the results to return only queues\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * Specifies whether the queue's metadata be returned as part of the response\n   * body.\n   */\n  includeMetadata?: boolean;\n}\n\n/**\n * A QueueServiceClient represents a URL to the Azure Storage Queue service allowing you\n * to manipulate queues.\n *\n * @export\n * @class QueueServiceClient\n */\nexport class QueueServiceClient extends StorageClient {\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @returns {QueueServiceClient} A new QueueServiceClient object from the given connection string.\n   * @memberof QueueServiceClient\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    options?: StoragePipelineOptions\n  ): QueueServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new QueueServiceClient(extractedCreds.url, pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new QueueServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * serviceContext provided by protocol layer.\n   *\n   * @private\n   * @type {Service}\n   * @memberof QueueServiceClient\n   */\n  private serviceContext: Service;\n\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue service, such as\n   *                     \"https://myaccount.queue.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.queue.core.windows.net?sasString\".\n   * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueServiceClient\n   *\n   * Example using DefaultAzureCredential from `@azure/identity`:\n   *\n   * ```js\n   * const account = \"<account>\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const queueServiceClient = new QueueServiceClient(\n   *   `https://${account}.queue.core.windows.net`,\n   *   credential\n   * }\n   * ```\n   *\n   * Example using an account name/key:\n   *\n   * ```js\n   * const account = \"<account>\";\n   *\n   * const sharedKeyCredential = new StorageSharedKeyCredential(account, \"<account key>\");\n   *\n   * const queueServiceClient = new QueueServiceClient(\n   *   `https://${account}.queue.core.windows.net`,\n   *   sharedKeyCredential,\n   *   {\n   *     retryOptions: { maxTries: 4 }, // Retry options\n   *     telemetry: { value: \"BasicSample/V11.0.0\" } // Customized telemetry string\n   *   }\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of QueueServiceClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue service, such as\n   *                     \"https://myaccount.queue.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.queue.core.windows.net?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof QueueServiceClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    options?: StoragePipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential) ||\n      credentialOrPipeline instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second paramter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a {@link QueueClient} object.\n   *\n   * @param {string} queueName\n   * @returns {QueueClient} a new QueueClient\n   * @memberof QueueServiceClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const queueClient = queueServiceClient.getQueueClient(\"<new queue name>\");\n   * const createQueueResponse = await queueClient.create();\n   * ```\n   */\n  public getQueueClient(queueName: string): QueueClient {\n    return new QueueClient(appendToURLPath(this.url, queueName), this.pipeline);\n  }\n\n  /**\n   * Returns a list of the queues under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1\n   *\n   * @param {string} [marker] A string value that identifies the portion of\n   *                        the list of queues to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all queues remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {Promise<ServiceListQueuesSegmentResponse>} Response data for the list queues segment operation.\n   * @memberof QueueServiceClient\n   */\n  private async listQueuesSegment(\n    marker?: string,\n    options: ServiceListQueuesSegmentOptions = {}\n  ): Promise<ServiceListQueuesSegmentResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-listQueuesSegment\",\n      options.tracingOptions\n    );\n\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    try {\n      return await this.serviceContext.listQueuesSegment({\n        abortSignal: options.abortSignal,\n        marker: marker,\n        maxPageSize: options.maxPageSize,\n        prefix: options.prefix,\n        include: options.include === undefined ? undefined : [options.include],\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link ServiceListQueuesSegmentResponse} objects\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                        the list of queues to be returned with the next listing operation. The\n   *                        operation returns the continuationToken value within the response body if the\n   *                        listing operation did not return all queues remaining to be listed\n   *                        with the current page. The continuationToken value can be used as the value for\n   *                        the marker parameter in a subsequent call to request the next page of list\n   *                        items. The marker value is opaque to the client.\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {AsyncIterableIterator<ServiceListQueuesSegmentResponse>}\n   * @memberof QueueServiceClient\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListQueuesSegmentOptions = {}\n  ): AsyncIterableIterator<ServiceListQueuesSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    let listQueuesResponse;\n    do {\n      listQueuesResponse = await this.listQueuesSegment(marker, options);\n      marker = listQueuesResponse.continuationToken;\n      yield await listQueuesResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for {@link QueueItem} objects\n   *\n   * @private\n   * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.\n   * @returns {AsyncIterableIterator<QueueItem>}\n   * @memberof QueueServiceClient\n   */\n  private async *listItems(\n    options: ServiceListQueuesSegmentOptions = {}\n  ): AsyncIterableIterator<QueueItem> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.queueItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the queues\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the queues in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const item of queueServiceClient.listQueues()) {\n   *   console.log(`Queue${i}: ${item.name}`);\n   *   i++;\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = queueServiceClient.listQueues();\n   * let item = await iterator.next();\n   * while (!item.done) {\n   *   console.log(`Queue${i}: ${iterator.value.name}`);\n   *   i++;\n   *   item = await iterator.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const item2 of queueServiceClient.listQueues().byPage({ maxPageSize: 20 })) {\n   *   if (item2.queueItems) {\n   *     for (const queueItem of item2.queueItems) {\n   *       console.log(`Queue${i}: ${queueItem.name}`);\n   *       i++;\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });\n   * let item = (await iterator.next()).value;\n   *\n   * // Prints 2 queue names\n   * if (item.queueItems) {\n   *   for (const queueItem of item.queueItems) {\n   *     console.log(`Queue${i}: ${queueItem.name}`);\n   *     i++;\n   *   }\n   * }\n   * // Gets next marker\n   * let marker = item.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   * iterator = queueServiceClient.listQueues().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * item = (await iterator.next()).value;\n   *\n   * // Prints 10 queue names\n   * if (item.queueItems) {\n   *   for (const queueItem of item.queueItems) {\n   *     console.log(`Queue${i}: ${queueItem.name}`);\n   *     i++;\n   *   }\n   * }\n   * ```\n   *\n   * @param {ServiceListQueuesOptions} [options] Options to list queues operation.\n   * @memberof QueueServiceClient\n   * @returns {PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>} An asyncIterableIterator that supports paging.\n   */\n  public listQueues(\n    options: ServiceListQueuesOptions = {}\n  ): PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse> {\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    const updatedOptions: ServiceListQueuesSegmentOptions = {\n      ...options,\n      ...(options.includeMetadata ? { include: \"metadata\" } : {})\n    };\n\n    // AsyncIterableIterator to iterate over queues\n    const iter = this.listItems(updatedOptions);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...updatedOptions\n        });\n      }\n    };\n  }\n\n  /**\n   * Gets the properties of a storage account’s Queue service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-properties\n   *\n   * @param {ServiceGetPropertiesOptions} [options] Options to get properties operation.\n   * @returns {Promise<ServiceGetPropertiesResponse>} Response data including the queue service properties.\n   * @memberof QueueServiceClient\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-getProperties\",\n      options.tracingOptions\n    );\n    try {\n      return await this.serviceContext.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s Queue service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-service-properties\n   *\n   * @param {QueueServiceProperties} properties\n   * @param {ServiceGetPropertiesOptions} [options] Options to set properties operation.\n   * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.\n   * @memberof QueueServiceClient\n   */\n  public async setProperties(\n    properties: QueueServiceProperties,\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-setProperties\",\n      options.tracingOptions\n    );\n    try {\n      return await this.serviceContext.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Queue service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats\n   *\n   * @param {ServiceGetStatisticsOptions} [options] Options to get statistics operation.\n   * @returns {Promise<ServiceGetStatisticsResponse>} Response data for get statistics the operation.\n   * @memberof QueueServiceClient\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<ServiceGetStatisticsResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-getStatistics\",\n      options.tracingOptions\n    );\n    try {\n      return await this.serviceContext.getStatistics({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new queue under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4\n   *\n   * @param {string} queueName name of the queue to create\n   * @param {QueueCreateOptions} [options] Options to Queue create operation.\n   * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.\n   * @memberof QueueServiceClient\n   */\n  public async createQueue(\n    queueName: string,\n    options: QueueCreateOptions = {}\n  ): Promise<QueueCreateResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-createQueue\",\n      options.tracingOptions\n    );\n    try {\n      return await this.getQueueClient(queueName).create({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified queue permanently.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3\n   *\n   * @param {string} queueName name of the queue to delete.\n   * @param {QueueDeleteOptions} [options] Options to Queue delete operation.\n   * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.\n   * @memberof QueueServiceClient\n   */\n  public async deleteQueue(\n    queueName: string,\n    options: QueueDeleteOptions = {}\n  ): Promise<QueueDeleteResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueServiceClient-deleteQueue\",\n      options.tracingOptions\n    );\n    try {\n      return await this.getQueueClient(queueName).delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}