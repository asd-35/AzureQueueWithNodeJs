{"version":3,"file":"messageId.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/messageId.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAE7C,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AACtD,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAGnD,sCAAsC;AACtC;IAGE;;;OAGG;IACH,mBAAY,MAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAyCD,0BAAM,GAAN,UAAO,UAAkB,EAAE,iBAAyB,EAAE,OAA+E,EAAE,QAAyC;QAC9K,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;YACE,UAAU,YAAA;YACV,iBAAiB,mBAAA;YACjB,OAAO,SAAA;SACR,EACD,mBAAmB,EACnB,QAAQ,CAA4C,CAAC;IACzD,CAAC;IAuBD,gCAAY,GAAZ,UAAa,UAAkB,EAAE,OAAqF,EAAE,QAAyC;QAC/J,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;YACE,UAAU,YAAA;YACV,OAAO,SAAA;SACR,EACD,yBAAyB,EACzB,QAAQ,CAA4C,CAAC;IACzD,CAAC;IACH,gBAAC;AAAD,CAAC,AA3FD,IA2FC;;AAED,2BAA2B;AAC3B,IAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC1D,IAAM,mBAAmB,GAA2B;IAClD,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,kCAAkC;IACxC,aAAa,EAAE;QACb,UAAU,CAAC,GAAG;KACf;IACD,eAAe,EAAE;QACf,UAAU,CAAC,UAAU;QACrB,UAAU,CAAC,kBAAkB;QAC7B,UAAU,CAAC,gBAAgB;KAC5B;IACD,gBAAgB,EAAE;QAChB,UAAU,CAAC,OAAO;QAClB,UAAU,CAAC,SAAS;KACrB;IACD,WAAW,EAAE;QACX,aAAa,EAAE;YACb,SAAS;YACT,cAAc;SACf;QACD,MAAM,EAAE,OAAO,CAAC,YAAY;KAC7B;IACD,WAAW,EAAE,gCAAgC;IAC7C,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,sBAAsB;SAC9C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,YAAY;YAChC,aAAa,EAAE,OAAO,CAAC,sBAAsB;SAC9C;KACF;IACD,KAAK,EAAE,IAAI;IACX,UAAU,YAAA;CACX,CAAC;AAEF,IAAM,yBAAyB,GAA2B;IACxD,UAAU,EAAE,QAAQ;IACpB,IAAI,EAAE,kCAAkC;IACxC,aAAa,EAAE;QACb,UAAU,CAAC,GAAG;KACf;IACD,eAAe,EAAE;QACf,UAAU,CAAC,UAAU;QACrB,UAAU,CAAC,gBAAgB;KAC5B;IACD,gBAAgB,EAAE;QAChB,UAAU,CAAC,OAAO;QAClB,UAAU,CAAC,SAAS;KACrB;IACD,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,sBAAsB;SAC9C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,YAAY;YAChC,aAAa,EAAE,OAAO,CAAC,sBAAsB;SAC9C;KACF;IACD,KAAK,EAAE,IAAI;IACX,UAAU,YAAA;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/messageIdMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a MessageId. */\nexport class MessageId {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a MessageId.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Update operation was introduced with version 2011-08-18 of the Queue service API. The Update\n   * Message operation updates the visibility timeout of a message. You can also use this operation\n   * to update the contents of a message. A message must be in a format that can be included in an\n   * XML request with UTF-8 encoding, and the encoded message can be up to 64KB in size.\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessageIdUpdateResponse>\n   */\n  update(popReceipt: string, visibilityTimeout: number, options?: Models.MessageIdUpdateOptionalParams): Promise<Models.MessageIdUpdateResponse>;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param callback The callback\n   */\n  update(popReceipt: string, visibilityTimeout: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param visibilityTimeout Optional. Specifies the new visibility timeout value, in seconds,\n   * relative to server time. The default value is 30 seconds. A specified value must be larger than\n   * or equal to 1 second, and cannot be larger than 7 days, or larger than 2 hours on REST protocol\n   * versions prior to version 2011-08-18. The visibility timeout of a message can be set to a value\n   * later than the expiry time.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(popReceipt: string, visibilityTimeout: number, options: Models.MessageIdUpdateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  update(popReceipt: string, visibilityTimeout: number, options?: Models.MessageIdUpdateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.MessageIdUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        popReceipt,\n        visibilityTimeout,\n        options\n      },\n      updateOperationSpec,\n      callback) as Promise<Models.MessageIdUpdateResponse>;\n  }\n\n  /**\n   * The Delete operation deletes the specified message.\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MessageIdDeleteResponse>\n   */\n  deleteMethod(popReceipt: string, options?: Models.MessageIdDeleteMethodOptionalParams): Promise<Models.MessageIdDeleteResponse>;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param callback The callback\n   */\n  deleteMethod(popReceipt: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param popReceipt Required. Specifies the valid pop receipt value returned from an earlier call\n   * to the Get Messages or Update Message operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(popReceipt: string, options: Models.MessageIdDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(popReceipt: string, options?: Models.MessageIdDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.MessageIdDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        popReceipt,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.MessageIdDeleteResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{queueName}/messages/{messageid}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.popReceipt,\n    Parameters.visibilityTimeout1,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"queueMessage\"\n    ],\n    mapper: Mappers.QueueMessage\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    204: {\n      headersMapper: Mappers.MessageIdUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessageIdUpdateHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{queueName}/messages/{messageid}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.popReceipt,\n    Parameters.timeoutInSeconds\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.MessageIdDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.MessageIdDeleteHeaders\n    }\n  },\n  isXML: true,\n  serializer\n};\n"]}