{"version":3,"file":"QueueClient.js","sourceRoot":"","sources":["../../src/QueueClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  HttpResponse,\n  TokenCredential,\n  isTokenCredential,\n  isNode,\n  getDefaultProxySettings,\n  URLBuilder\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport {\n  EnqueuedMessage,\n  DequeuedMessageItem,\n  MessagesDequeueHeaders,\n  MessagesDequeueOptionalParams,\n  MessagesEnqueueHeaders,\n  MessagesEnqueueOptionalParams,\n  MessagesPeekHeaders,\n  MessagesPeekOptionalParams,\n  MessageIdUpdateResponse,\n  MessageIdDeleteResponse,\n  MessagesClearResponse,\n  PeekedMessageItem,\n  QueueCreateResponse,\n  QueueDeleteResponse,\n  QueueGetAccessPolicyHeaders,\n  QueueGetPropertiesResponse,\n  QueueSetAccessPolicyResponse,\n  QueueSetMetadataResponse,\n  SignedIdentifierModel\n} from \"./generatedModels\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { Messages, MessageId, Queue } from \"./generated/src/operations\";\nimport { newPipeline, StoragePipelineOptions, Pipeline } from \"./Pipeline\";\nimport { StorageClient, CommonOptions } from \"./StorageClient\";\nimport {\n  appendToURLPath,\n  extractConnectionStringParts,\n  isIpEndpointStyle,\n  truncatedISO8061Date,\n  getStorageClientContext\n} from \"./utils/utils.common\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { createSpan } from \"./utils/tracing\";\nimport { Metadata } from \"./models\";\n\n/**\n * Options to configure {@link QueueClient.create} operation\n *\n * @export\n * @interface QueueCreateOptions\n */\nexport interface QueueCreateOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueCreateOptions\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * A collection of key-value string pair to associate with the queue object.\n   * The keys need to be lower-case.\n   *\n   * @type {Metadata}\n   * @memberof QueueCreateOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Options to configure {@link QueueClient.exists} operation\n *\n * @export\n * @interface QueueExistsOptions\n */\nexport interface QueueExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueExistsOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.getProperties} operation\n *\n * @export\n * @interface QueueGetPropertiesOptions\n */\nexport interface QueueGetPropertiesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueGetPropertiesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.delete} operation\n *\n * @export\n * @interface QueueDeleteOptions\n */\nexport interface QueueDeleteOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueDeleteOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.getAccessPolicy} operation\n *\n * @export\n * @interface QueueGetAccessPolicyOptions\n */\nexport interface QueueGetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueGetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.setAccessPolicy} operation\n *\n * @export\n * @interface QueueSetAccessPolicyOptions\n */\nexport interface QueueSetAccessPolicyOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueSetAccessPolicyOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.setMetadata} operation\n *\n * @export\n * @interface QueueSetMetadataOptions\n */\nexport interface QueueSetMetadataOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueSetMetadataOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Signed identifier.\n *\n * @export\n * @interface SignedIdentifier\n */\nexport interface SignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} startsOn the date-time the policy is active.\n     */\n    startsOn?: Date;\n    /**\n     * @member {string} expiresOn the date-time the policy expires.\n     */\n    expiresOn?: Date;\n    /**\n     * @member {string} permission the permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl\n     */\n    permissions?: string;\n  };\n}\n\n/**\n * Contains response data for the {@link QueueClient.getAccessPolicy} operation.\n */\nexport declare type QueueGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & QueueGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: QueueGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SignedIdentifierModel[];\n    };\n  };\n\n/**\n * Options to configure {@link QueueClient.clearMessages} operation\n *\n * @export\n * @interface QueueClearMessagesOptions\n */\nexport interface QueueClearMessagesOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueClearMessagesOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Options to configure {@link QueueClient.sendMessage} operation\n *\n * @export\n * @interface QueueSendMessageOptions\n * @extends {MessagesEnqueueOptionalParams}\n */\nexport interface QueueSendMessageOptions extends MessagesEnqueueOptionalParams, CommonOptions {}\n\n/**\n * Options to configure {@link QueueClient.receiveMessages} operation\n *\n * @export\n * @interface QueueReceiveMessageOptions\n * @extends {MessagesDequeueOptionalParams}\n */\nexport interface QueueReceiveMessageOptions extends MessagesDequeueOptionalParams, CommonOptions {}\n\n/**\n * Options to configure {@link QueueClient.peekMessages} operation\n *\n * @export\n * @interface QueuePeekMessagesOptions\n * @extends {MessagesPeekOptionalParams}\n */\nexport interface QueuePeekMessagesOptions extends MessagesPeekOptionalParams, CommonOptions {}\n\n/**\n * Contains the response data for the {@link QueueClient.sendMessage} operation.\n */\nexport declare type QueueSendMessageResponse = {\n  /**\n   * @member {string} messageId The ID of the sent Message.\n   */\n  messageId: string;\n  /**\n   * @member {string} popReceipt This value is required to delete the Message.\n   * If deletion fails using this popreceipt then the message has been received\n   * by another client.\n   */\n  popReceipt: string;\n  /**\n   * @member {Date} insertedOn The time that the message was inserted into the\n   * Queue.\n   */\n  insertedOn: Date;\n  /**\n   * @member {Date} expiresOn The time that the message will expire and be\n   * automatically deleted.\n   */\n  expiresOn: Date;\n  /**\n   * @member {Date} nextVisibleOn The time that the message will again become\n   * visible in the Queue.\n   */\n  nextVisibleOn: Date;\n} & MessagesEnqueueHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesEnqueueHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: EnqueuedMessage[];\n    };\n  };\n\n/**\n * The object returned in the `receivedMessageItems` array when calling {@link QueueClient.receiveMessages}.\n *\n * See: {@link QueueReceiveMessageResponse}\n */\nexport declare type ReceivedMessageItem = DequeuedMessageItem;\n\n/**\n * Contains the response data for the {@link QueueClient.receiveMessages} operation.\n */\nexport declare type QueueReceiveMessageResponse = {\n  receivedMessageItems: ReceivedMessageItem[];\n} & MessagesDequeueHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesDequeueHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ReceivedMessageItem[];\n    };\n  };\n\n/**\n * Contains the response data for the {@link QueueClient.peekMessages} operation.\n */\nexport declare type QueuePeekMessagesResponse = {\n  peekedMessageItems: PeekedMessageItem[];\n} & MessagesPeekHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: MessagesPeekHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PeekedMessageItem[];\n    };\n  };\n\n/**\n * Options to configure the {@link QueueClient.deleteMessage} operation\n *\n * @export\n * @interface QueueDeleteMessageOptions\n */\nexport interface QueueDeleteMessageOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueDeleteMessageOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Contains response data for the {@link QueueClient.updateMessage} operation.\n */\nexport declare type QueueUpdateMessageResponse = MessageIdUpdateResponse;\n\n/**\n * Contains response data for the {@link QueueClient.deleteMessage} operation.\n */\nexport declare type QueueDeleteMessageResponse = MessageIdDeleteResponse;\n\n/**\n * Contains response data for the {@link QueueClient.clearMessages} operation.\n */\nexport declare type QueueClearMessagesResponse = MessagesClearResponse;\n\n/**\n * Options to configure {@link QueueClient.updateMessage} operation\n *\n * @export\n * @interface QueueUpdateMessageOptions\n */\nexport interface QueueUpdateMessageOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   *\n   * @type {AbortSignalLike}\n   * @memberof QueueUpdateMessageOptions\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Contains response data for the {@link QueueClient.createIfNotExists} operation.\n *\n * @export\n * @interface QueueCreateIfNotExistsResponse\n */\nexport interface QueueCreateIfNotExistsResponse extends QueueCreateResponse {\n  /**\n   * Indicate whether the queue is successfully created. Is false when the queue is not changed as it already exists.\n   *\n   * @type {boolean}\n   * @memberof QueueCreateIfNotExistsResponse\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link QueueClient.deleteIfExists} operation.\n *\n * @export\n * @interface QueueDeleteIfExistsResponse\n */\nexport interface QueueDeleteIfExistsResponse extends QueueDeleteResponse {\n  /**\n   * Indicate whether the queue is successfully deleted. Is false if the queue does not exist in the first place.\n   *\n   * @type {boolean}\n   * @memberof QueueDeleteIfExistsResponse\n   */\n  succeeded: boolean;\n}\n\n/**\n * A QueueClient represents a URL to an Azure Storage Queue's messages allowing you to manipulate its messages.\n *\n * @export\n * @class QueueClient\n */\nexport class QueueClient extends StorageClient {\n  /**\n   * messagesContext provided by protocol layer.\n   *\n   * @private\n   * @type {Messages}\n   * @memberof QueueClient\n   */\n  private messagesContext: Messages;\n  /**\n   * queueContext provided by protocol layer.\n   *\n   * @private\n   * @type {Queue}\n   * @memberof QueueClient\n   */\n  private queueContext: Queue;\n  private _name: string;\n  private _messagesUrl: string;\n\n  /**\n   * The name of the queue.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param {string} queueName Queue name.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueClient\n   */\n  constructor(connectionString: string, queueName: string, options?: StoragePipelineOptions);\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n   * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.\n   * @memberof QueueClient\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    options?: StoragePipelineOptions\n  );\n  /**\n   * Creates an instance of QueueClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage queue, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof QueueClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrQueueName?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline\n      | string,\n    options?: StoragePipelineOptions\n  ) {\n    options = options || {};\n    let pipeline: Pipeline;\n    let url: string;\n    if (credentialOrPipelineOrQueueName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrQueueName;\n    } else if (\n      (isNode && credentialOrPipelineOrQueueName instanceof StorageSharedKeyCredential) ||\n      credentialOrPipelineOrQueueName instanceof AnonymousCredential ||\n      isTokenCredential(credentialOrPipelineOrQueueName)\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrQueueName, options);\n    } else if (\n      !credentialOrPipelineOrQueueName &&\n      typeof credentialOrPipelineOrQueueName !== \"string\"\n    ) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second paramter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrQueueName &&\n      typeof credentialOrPipelineOrQueueName === \"string\"\n    ) {\n      // (connectionString: string, containerName: string, queueName: string, options?: StoragePipelineOptions)\n      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          const queueName = credentialOrPipelineOrQueueName;\n          const sharedKeyCredential = new StorageSharedKeyCredential(\n            extractedCreds.accountName,\n            extractedCreds.accountKey\n          );\n          url = appendToURLPath(extractedCreds.url, queueName);\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        const queueName = credentialOrPipelineOrQueueName;\n        url = appendToURLPath(extractedCreds.url, queueName) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\n          \"Connection string must be either an Account connection string or a SAS connection string\"\n        );\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for queueName parameter\");\n    }\n    super(url, pipeline);\n    this._name = this.getQueueNameFromUrl();\n    this.queueContext = new Queue(this.storageClientContext);\n\n    // MessagesContext\n    // Build the url with \"messages\"\n    const partsOfUrl = this.url.split(\"?\");\n    this._messagesUrl = partsOfUrl[1]\n      ? appendToURLPath(partsOfUrl[0], \"messages\") + \"?\" + partsOfUrl[1]\n      : appendToURLPath(partsOfUrl[0], \"messages\");\n\n    this.messagesContext = new Messages(getStorageClientContext(this._messagesUrl, this.pipeline));\n  }\n\n  private getMessageIdContext(messageId: string): MessageId {\n    // Build the url with messageId\n    const partsOfUrl = this._messagesUrl.split(\"?\");\n    const urlWithMessageId = partsOfUrl[1]\n      ? appendToURLPath(partsOfUrl[0], messageId) + \"?\" + partsOfUrl[1]\n      : appendToURLPath(partsOfUrl[0], messageId);\n\n    return new MessageId(getStorageClientContext(urlWithMessageId, this.pipeline));\n  }\n\n  /**\n   * Creates a new queue under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4\n   *\n   * @param {QueueCreateOptions} [options] Options to Queue create operation.\n   * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.\n   * @memberof QueueClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const queueClient = queueServiceClient.getQueueClient(\"<new queue name>\");\n   * const createQueueResponse = await queueClient.create();\n   * ```\n   */\n  public async create(options: QueueCreateOptions = {}): Promise<QueueCreateResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-create\", options.tracingOptions);\n    try {\n      return await this.queueContext.create({\n        ...options,\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new queue under the specified account if it doesn't already exist.\n   * If the queue already exists, it is not changed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4\n   *\n   * @param {QueueCreateOptions} [options]\n   * @returns {Promise<QueueCreateIfNotExistsResponse>}\n   * @memberof QueueClient\n   */\n  public async createIfNotExists(\n    options: QueueCreateOptions = {}\n  ): Promise<QueueCreateIfNotExistsResponse> {\n    const { span, spanOptions } = createSpan(\n      \"QueueClient-createIfNotExists\",\n      options.tracingOptions\n    );\n    try {\n      const response = await this.create({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n\n      // When a queue with the specified name already exists, the Queue service checks the metadata associated with the existing queue.\n      // If the existing metadata is identical to the metadata specified on the Create Queue request, status code 204 (No Content) is returned.\n      // If the existing metadata does not match, the operation fails and status code 409 (Conflict) is returned.\n      if (response._response.status == 204) {\n        return {\n          succeeded: false,\n          ...response\n        };\n      }\n      return {\n        succeeded: true,\n        ...response\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"QueueAlreadyExists\") {\n        span.setStatus({\n          code: CanonicalCode.ALREADY_EXISTS,\n          message: \"Expected exception when creating a queue only if it does not already exist.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified queue permanently if it exists.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3\n   *\n   * @param {QueueDeleteOptions} [options]\n   * @returns {Promise<QueueDeleteIfExistsResponse>}\n   * @memberof QueueClient\n   */\n  public async deleteIfExists(\n    options: QueueDeleteOptions = {}\n  ): Promise<QueueDeleteIfExistsResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-deleteIfExists\", options.tracingOptions);\n    try {\n      const res = await this.delete({\n        ...options,\n        tracingOptions: { ...options!.tracingOptions, spanOptions }\n      });\n      return {\n        succeeded: true,\n        ...res\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"QueueNotFound\") {\n        span.setStatus({\n          code: CanonicalCode.NOT_FOUND,\n          message: \"Expected exception when deleting a queue only if it exists.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified queue permanently.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3\n   *\n   * @param {QueueDeleteOptions} [options] Options to Queue delete operation.\n   * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.\n   * @memberof QueueClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const deleteQueueResponse = await queueClient.delete();\n   * console.log(\n   *   \"Delete queue successfully, service assigned request Id:\", deleteQueueResponse.requestId\n   * );\n   * ```\n   */\n  public async delete(options: QueueDeleteOptions = {}): Promise<QueueDeleteResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-delete\", options.tracingOptions);\n    try {\n      return await this.queueContext.deleteMethod({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the specified queue exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing queue might be deleted by other clients or\n   * applications. Vice versa new queues might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param {QueueExistsOptions} [options] options to Exists operation.\n   * @returns {Promise<boolean>}\n   * @memberof QueueClient\n   */\n  public async exists(options: QueueExistsOptions = {}): Promise<boolean> {\n    const { span, spanOptions } = createSpan(\"QueueClient-exists\", options.tracingOptions);\n    try {\n      await this.getProperties({\n        abortSignal: options.abortSignal,\n        tracingOptions: { ...options.tracingOptions, spanOptions }\n      });\n      return true;\n    } catch (e) {\n      if (e.statusCode === 404) {\n        span.setStatus({\n          code: CanonicalCode.NOT_FOUND,\n          message: \"Expected exception when checking queue existence\"\n        });\n        return false;\n      }\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets all user-defined metadata and system properties for the specified\n   * queue. Metadata is associated with the queue as name-values pairs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listQueues` method of {@link QueueServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param {QueueGetPropertiesOptions} [options] Options to Queue get properties operation.\n   * @returns {Promise<QueueGetPropertiesResponse>} Response data for the Queue get properties operation.\n   * @memberof QueueClient\n   */\n  public async getProperties(\n    options: QueueGetPropertiesOptions = {}\n  ): Promise<QueueGetPropertiesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-getProperties\", options.tracingOptions);\n    try {\n      return await this.queueContext.getProperties({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified queue.\n   *\n   * If no option provided, or no metadata defined in the option parameter, the queue\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata\n   *\n   * @param {Metadata} [metadata] If no metadata provided, all existing metadata will be removed.\n   * @param {QueueSetMetadataOptions} [options] Options to Queue set metadata operation.\n   * @returns {Promise<QueueSetMetadataResponse>} Response data for the Queue set metadata operation.\n   * @memberof QueueClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: QueueSetMetadataOptions = {}\n  ): Promise<QueueSetMetadataResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-setMetadata\", options.tracingOptions);\n    try {\n      return await this.queueContext.setMetadata({\n        abortSignal: options.abortSignal,\n        metadata,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets details about any stored access policies specified on the queue that may be used with Shared Access Signatures.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl\n   *\n   * @param {QueueGetAccessPolicyOptions} [options] Options to Queue get access policy operation.\n   * @returns {Promise<QueueGetAccessPolicyResponse>} Response data for the Queue get access policy operation.\n   * @memberof QueueClient\n   */\n  public async getAccessPolicy(\n    options: QueueGetAccessPolicyOptions = {}\n  ): Promise<QueueGetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-getAccessPolicy\", options.tracingOptions);\n    try {\n      const response = await this.queueContext.getAccessPolicy({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n\n      const res: QueueGetAccessPolicyResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        signedIdentifiers: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const identifier of response) {\n        let accessPolicy: any = undefined;\n        if (identifier.accessPolicy) {\n          accessPolicy = {\n            permissions: identifier.accessPolicy.permissions\n          };\n\n          if (identifier.accessPolicy.expiresOn) {\n            accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n          }\n\n          if (identifier.accessPolicy.startsOn) {\n            accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n          }\n        }\n\n        res.signedIdentifiers.push({\n          accessPolicy,\n          id: identifier.id\n        });\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets stored access policies for the queue that may be used with Shared Access Signatures.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl\n   *\n   * @param {SignedIdentifier[]} [queueAcl]\n   * @param {QueueSetAccessPolicyOptions} [options] Options to Queue set access policy operation.\n   * @returns {Promise<QueueSetAccessPolicyResponse>} Response data for the Queue set access policy operation.\n   * @memberof QueueClient\n   */\n  public async setAccessPolicy(\n    queueAcl?: SignedIdentifier[],\n    options: QueueSetAccessPolicyOptions = {}\n  ): Promise<QueueSetAccessPolicyResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-setAccessPolicy\", options.tracingOptions);\n    try {\n      const acl: SignedIdentifierModel[] = [];\n      for (const identifier of queueAcl || []) {\n        acl.push({\n          accessPolicy: {\n            expiresOn: identifier.accessPolicy.expiresOn\n              ? truncatedISO8061Date(identifier.accessPolicy.expiresOn)\n              : undefined,\n            permissions: identifier.accessPolicy.permissions,\n            startsOn: identifier.accessPolicy.startsOn\n              ? truncatedISO8061Date(identifier.accessPolicy.startsOn)\n              : undefined\n          },\n          id: identifier.id\n        });\n      }\n\n      return await this.queueContext.setAccessPolicy({\n        abortSignal: options.abortSignal,\n        queueAcl: acl,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Clear deletes all messages from a queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages\n   *\n   * @param {QueueClearMessagesOptions} [options] Options to clear messages operation.\n   * @returns {Promise<QueueClearMessagesResponse>} Response data for the clear messages operation.\n   * @memberof QueueClient\n   */\n  public async clearMessages(\n    options: QueueClearMessagesOptions = {}\n  ): Promise<QueueClearMessagesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-clearMessages\", options.tracingOptions);\n    try {\n      return await this.messagesContext.clear({\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * sendMessage adds a new message to the back of a queue. The visibility timeout specifies how long\n   * the message should be invisible to Dequeue and Peek operations.\n   * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.\n   * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-message\n   *\n   * @param {string} messageText Text of the message to send\n   * @param {QueueSendMessageOptions} [options] Options to send messages operation.\n   * @returns {Promise<QueueSendMessageResponse>} Response data for the send messages operation.\n   * @memberof QueueClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const sendMessageResponse = await queueClient.sendMessage(\"Hello World!\");\n   * console.log(\n   *   \"Sent message successfully, service assigned message Id:\", sendMessageResponse.messageId,\n   *   \"service assigned request Id:\", sendMessageResponse.requestId\n   * );\n   * ```\n   */\n  public async sendMessage(\n    messageText: string,\n    options: QueueSendMessageOptions = {}\n  ): Promise<QueueSendMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-sendMessage\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.enqueue(\n        {\n          messageText: messageText\n        },\n        {\n          abortSignal: options.abortSignal,\n          ...options,\n          spanOptions\n        }\n      );\n      const item = response[0];\n      return {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        version: response.version,\n        errorCode: response.errorCode,\n        messageId: item.messageId,\n        popReceipt: item.popReceipt,\n        nextVisibleOn: item.nextVisibleOn,\n        insertedOn: item.insertedOn,\n        expiresOn: item.expiresOn\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * receiveMessages retrieves one or more messages from the front of the queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages\n   *\n   * @param {QueueReceiveMessageOptions} [options] Options to receive messages operation.\n   * @returns {Promise<QueueReceiveMessageResponse>} Response data for the receive messages operation.\n   * @memberof QueueClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const response = await queueClient.receiveMessages();\n   * if (response.receivedMessageItems.length == 1) {\n   *   const receivedMessageItem = response.receivedMessageItems[0];\n   *   console.log(\"Processing & deleting message with content:\", receivedMessageItem.messageText);\n   *   const deleteMessageResponse = await queueClient.deleteMessage(\n   *     receivedMessageItem.messageId,\n   *     receivedMessageItem.popReceipt\n   *   );\n   *   console.log(\n   *     \"Delete message successfully, service assigned request Id:\",\n   *     deleteMessageResponse.requestId\n   *   );\n   * }\n   * ```\n   */\n  public async receiveMessages(\n    options: QueueReceiveMessageOptions = {}\n  ): Promise<QueueReceiveMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-receiveMessages\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.dequeue({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n\n      const res: QueueReceiveMessageResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        receivedMessageItems: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const item of response) {\n        res.receivedMessageItems.push(item);\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * peekMessages retrieves one or more messages from the front of the queue but does not alter the visibility of the message.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages\n   *\n   * @param {QueuePeekMessagesOptions} [options] Options to peek messages operation.\n   * @returns {QueuePeekMessagesResponse>} Response data for the peek messages operation.\n   * @memberof QueueClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const peekMessagesResponse = await queueClient.peekMessages();\n   * console.log(\"The peeked message is:\", peekMessagesResponse.peekedMessageItems[0].messageText);\n   * ```\n   */\n  public async peekMessages(\n    options: QueuePeekMessagesOptions = {}\n  ): Promise<QueuePeekMessagesResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-peekMessages\", options.tracingOptions);\n    try {\n      const response = await this.messagesContext.peek({\n        abortSignal: options.abortSignal,\n        ...options,\n        spanOptions\n      });\n\n      const res: QueuePeekMessagesResponse = {\n        _response: response._response,\n        date: response.date,\n        requestId: response.requestId,\n        clientRequestId: response.clientRequestId,\n        peekedMessageItems: [],\n        version: response.version,\n        errorCode: response.errorCode\n      };\n\n      for (const item of response) {\n        res.peekedMessageItems.push(item);\n      }\n\n      return res;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * deleteMessage permanently removes the specified message from its queue.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2\n   *\n   * @param {string} messageId Id of the message.\n   * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.\n   * @param {QueueDeleteMessageOptions} [options] Options to delete message operation.\n   * @returns {Promise<QueueDeleteMessageResponse>} Response data for the delete message operation.\n   * @memberof QueueClient\n   */\n  public async deleteMessage(\n    messageId: string,\n    popReceipt: string,\n    options: QueueDeleteMessageOptions = {}\n  ): Promise<QueueDeleteMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-deleteMessage\", options.tracingOptions);\n    try {\n      return await this.getMessageIdContext(messageId).deleteMethod(popReceipt, {\n        abortSignal: options.abortSignal,\n        spanOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update changes a message's visibility timeout and contents.\n   * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.\n   * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/update-message\n   *\n   * @param {string} messageId Id of the message\n   * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.\n   * @param {string} message Message to update. If this parameter is undefined, then the content of the message won't be updated.\n   * @param {number} visibilityTimeout Specifies the new visibility timeout value, in seconds,\n   *                                   relative to server time. The new value must be larger than or equal to 0,\n   *                                   and cannot be larger than 7 days. The visibility timeout of a message cannot\n   *                                   be set to a value later than the expiry time.\n   *                                   A message can be updated until it has been deleted or has expired.\n   * @param {QueueUpdateMessageOptions} [options] Options to update message operation.\n   * @returns {Promise<QueueUpdateMessageResponse>} Response data for the update message operation.\n   * @memberof QueueClient\n   */\n  public async updateMessage(\n    messageId: string,\n    popReceipt: string,\n    message?: string,\n    visibilityTimeout?: number,\n    options: QueueUpdateMessageOptions = {}\n  ): Promise<QueueUpdateMessageResponse> {\n    const { span, spanOptions } = createSpan(\"QueueClient-updateMessage\", options.tracingOptions);\n    let queueMessage = undefined;\n    if (message !== undefined) {\n      queueMessage = { messageText: message };\n    }\n\n    try {\n      return await this.getMessageIdContext(messageId).update(popReceipt, visibilityTimeout || 0, {\n        abortSignal: options.abortSignal,\n        spanOptions,\n        queueMessage\n      });\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private getQueueNameFromUrl(): string {\n    let queueName;\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.queue.core.windows.net/myqueue?sasString\".\n      // \"https://myaccount.queue.core.windows.net/myqueue\".\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10001/devstoreaccount1/myqueue`\n      // http://localhost:10001/devstoreaccount1/queuename\n\n      const parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost()!.split(\".\")[1] === \"queue\") {\n        // \"https://myaccount.queue.core.windows.net/queuename\".\n        // .getPath() -> /queuename\n        queueName = parsedUrl.getPath()!.split(\"/\")[1];\n      } else if (isIpEndpointStyle(parsedUrl)) {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/queuename\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/queuename\n        // .getPath() -> /devstoreaccount1/queuename\n        queueName = parsedUrl.getPath()!.split(\"/\")[2];\n      } else {\n        // \"https://customdomain.com/queuename\".\n        // .getPath() -> /queuename\n        queueName = parsedUrl.getPath()!.split(\"/\")[1];\n      }\n\n      if (!queueName) {\n        throw new Error(\"Provided queueName is invalid.\");\n      }\n\n      return queueName;\n    } catch (error) {\n      throw new Error(\"Unable to extract queueName with provided information.\");\n    }\n  }\n}\n"]}