import { AbortSignalLike } from '@azure/abort-controller';
import { BaseRequestPolicy } from '@azure/core-http';
import * as coreHttp from '@azure/core-http';
import { deserializationPolicy } from '@azure/core-http';
import { HttpHeaders } from '@azure/core-http';
import { HttpOperationResponse } from '@azure/core-http';
import { HttpRequestBody } from '@azure/core-http';
import { HttpResponse } from '@azure/core-http';
import { HttpClient as IHttpClient } from '@azure/core-http';
import { KeepAliveOptions } from '@azure/core-http';
import { OperationTracingOptions } from '@azure/core-tracing';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { ProxyOptions } from '@azure/core-http';
import { RequestPolicy } from '@azure/core-http';
import { RequestPolicyFactory } from '@azure/core-http';
import { RequestPolicyOptions } from '@azure/core-http';
import { RestError } from '@azure/core-http';
import { ServiceClientOptions } from '@azure/core-http';
import { TokenCredential } from '@azure/core-http';
import { UserAgentOptions } from '@azure/core-http';
import { WebResource } from '@azure/core-http';
/**
 * An Access policy
 */
export declare interface AccessPolicy {
    /**
     * the date-time the policy is active
     * **NOTE: This entity will be treated as a string instead of a Date because the API can
     * potentially deal with a higher precision value than what is supported by JavaScript.**
     */
    startsOn?: string;
    /**
     * the date-time the policy expires
     * **NOTE: This entity will be treated as a string instead of a Date because the API can
     * potentially deal with a higher precision value than what is supported by JavaScript.**
     */
    expiresOn?: string;
    /**
     * the permissions for the acl policy
     */
    permissions?: string;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the
 * values are set, this should be serialized with toString and set as the permissions field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 *
 * @export
 * @class AccountSASPermissions
 */
export declare class AccountSASPermissions {
    /**
     * Parse initializes the AccountSASPermissions fields from a string.
     *
     * @static
     * @param {string} permissions
     * @returns {AccountSASPermissions}
     * @memberof AccountSASPermissions
     */
    static parse(permissions: string): AccountSASPermissions;
    /**
     * Permission to read resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    read: boolean;
    /**
     * Permission to write resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    write: boolean;
    /**
     * Permission to delete queues and messages granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    delete: boolean;
    /**
     * Permission to list queues granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    list: boolean;
    /**
     * Permission to add messages, table entities, and append to blobs granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    add: boolean;
    /**
     * Permission to create queues, blobs and files granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    create: boolean;
    /**
     * Permissions to update messages and table entities granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    update: boolean;
    /**
     * Permission to get and delete messages granted.
     *
     * @type {boolean}
     * @memberof AccountSASPermissions
     */
    process: boolean;
    /**
     * Produces the SAS permissions string for an Azure Storage account.
     * Call this method to set AccountSASSignatureValues Permissions field.
     *
     * Using this method will guarantee the resource types are in
     * an order accepted by the service.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     * @returns {string}
     * @memberof AccountSASPermissions
     */
    toString(): string;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the
 * values are set, this should be serialized with toString and set as the resources field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but
 * the order of the resources is particular and this class guarantees correctness.
 *
 * @export
 * @class AccountSASResourceTypes
 */
export declare class AccountSASResourceTypes {
    /**
     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid resource type.
     *
     * @static
     * @param {string} resourceTypes
     * @returns {AccountSASResourceTypes}
     * @memberof AccountSASResourceTypes
     */
    static parse(resourceTypes: string): AccountSASResourceTypes;
    /**
     * Permission to access service level APIs granted.
     *
     * @type {boolean}
     * @memberof AccountSASResourceTypes
     */
    service: boolean;
    /**
     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.
     *
     * @type {boolean}
     * @memberof AccountSASResourceTypes
     */
    container: boolean;
    /**
     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.
     *
     * @type {boolean}
     * @memberof AccountSASResourceTypes
     */
    object: boolean;
    /**
     * Converts the given resource types to a string.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
     *
     * @returns {string}
     * @memberof AccountSASResourceTypes
     */
    toString(): string;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that service. Once all the
 * values are set, this should be serialized with toString and set as the services field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but
 * the order of the services is particular and this class guarantees correctness.
 *
 * @export
 * @class AccountSASServices
 */
export declare class AccountSASServices {
    /**
     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid service.
     *
     * @static
     * @param {string} services
     * @returns {AccountSASServices}
     * @memberof AccountSASServices
     */
    static parse(services: string): AccountSASServices;
    /**
     * Permission to access blob resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASServices
     */
    blob: boolean;
    /**
     * Permission to access file resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASServices
     */
    file: boolean;
    /**
     * Permission to access queue resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASServices
     */
    queue: boolean;
    /**
     * Permission to access table resources granted.
     *
     * @type {boolean}
     * @memberof AccountSASServices
     */
    table: boolean;
    /**
     * Converts the given services to a string.
     *
     * @returns {string}
     * @memberof AccountSASServices
     */
    toString(): string;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once
 * all the values here are set appropriately, call generateSASQueryParameters() to obtain a representation of the SAS
 * which can actually be applied to queue urls. Note: that both this class and {@link SASQueryParameters} exist because
 * the former is mutable and a logical representation while the latter is immutable and used to generate actual REST
 * requests.
 *
 * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1
 * for more conceptual information on SAS
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
 * for descriptions of the parameters, including which are required
 *
 * @export
 * @class AccountSASSignatureValues
 */
export declare interface AccountSASSignatureValues {
    /**
     * If not provided, this defaults to the service version targeted by this version of the library.
     *
     * @type {string}
     * @memberof AccountSASSignatureValues
     */
    version?: string;
    /**
     * Optional. SAS protocols allowed.
     *
     * @type {SASProtocol}
     * @memberof AccountSASSignatureValues
     */
    protocol?: SASProtocol;
    /**
     * Optional. When the SAS will take effect.
     *
     * @type {Date}
     * @memberof AccountSASSignatureValues
     */
    startsOn?: Date;
    /**
     * The time after which the SAS will no longer work.
     *
     * @type {Date}
     * @memberof AccountSASSignatureValues
     */
    expiresOn: Date;
    /**
     * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help
     * constructing the permissions string.
     *
     * @type {AccountSASPermissions}
     * @memberof AccountSASSignatureValues
     */
    permissions: AccountSASPermissions;
    /**
     * Optional. IP range allowed.
     *
     * @type {SasIPRange}
     * @memberof AccountSASSignatureValues
     */
    ipRange?: SasIPRange;
    /**
     * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to
     * construct this value.
     *
     * @type {string}
     * @memberof AccountSASSignatureValues
     */
    services: string;
    /**
     * The values that indicate the resource types accessible with this SAS. Please refer
     * to {@link AccountSASResourceTypes} to construct this value.
     *
     * @type {string}
     * @memberof AccountSASSignatureValues
     */
    resourceTypes: string;
}
/**
 * AnonymousCredential provides a {@link CredentialPolicyCreator} member used to create
 * {@link AnonymousCredentialPolicy} objects. {@link AnonymousCredentialPolicy} is used with
 * HTTP(S) requests that read public resources or for use with Shared Access
 * Signatures (SAS).
 *
 * @export
 * @class AnonymousCredential
 * @extends {Credential}
 */
export declare class AnonymousCredential extends Credential {
    /**
     * Creates an {@link AnonymousCredentialPolicy} object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {AnonymousCredentialPolicy}
     * @memberof AnonymousCredential
     */
    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): AnonymousCredentialPolicy;
}
/**
 * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
 * or for use with Shared Access Signatures (SAS).
 *
 * @export
 * @class AnonymousCredentialPolicy
 * @extends {CredentialPolicy}
 */
export declare class AnonymousCredentialPolicy extends CredentialPolicy {
    /**
     * Creates an instance of AnonymousCredentialPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @memberof AnonymousCredentialPolicy
     */
    constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions);
}
export { BaseRequestPolicy };
/**
 * An interface for options common to every remote operation.
 */
export declare interface CommonOptions {
    /**
     * Options to configure spans created when tracing is enabled.
     */
    tracingOptions?: OperationTracingOptions;
}
/**
 * CORS is an HTTP feature that enables a web application running under one domain to access
 * resources in another domain. Web browsers implement a security restriction known as same-origin
 * policy that prevents a web page from calling APIs in a different domain; CORS provides a secure
 * way to allow one domain (the origin domain) to call APIs in another domain
 */
export declare interface CorsRule {
    /**
     * The origin domains that are permitted to make a request against the storage service via CORS.
     * The origin domain is the domain from which the request originates. Note that the origin must
     * be an exact case-sensitive match with the origin that the user age sends to the service. You
     * can also use the wildcard character '*' to allow all origin domains to make requests via CORS.
     */
    allowedOrigins: string;
    /**
     * The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma
     * separated)
     */
    allowedMethods: string;
    /**
     * the request headers that the origin domain may specify on the CORS request.
     */
    allowedHeaders: string;
    /**
     * The response headers that may be sent in the response to the CORS request and exposed by the
     * browser to the request issuer
     */
    exposedHeaders: string;
    /**
     * The maximum amount time that a browser should cache the preflight OPTIONS request.
     */
    maxAgeInSeconds: number;
}
/**
 * Credential is an abstract class for Azure Storage HTTP requests signing. This
 * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
 *
 * @export
 * @abstract
 * @class Credential
 */
export declare abstract class Credential implements RequestPolicyFactory {
    /**
     * Creates a RequestPolicy object.
     *
     * @param {RequestPolicy} _nextPolicy
     * @param {RequestPolicyOptions} _options
     * @returns {RequestPolicy}
     * @memberof Credential
     */
    create(_nextPolicy: RequestPolicy, _options: RequestPolicyOptions): RequestPolicy;
}
/**
 * Credential policy used to sign HTTP(S) requests before sending. This is an
 * abstract class.
 *
 * @export
 * @abstract
 * @class CredentialPolicy
 * @extends {BaseRequestPolicy}
 */
export declare abstract class CredentialPolicy extends BaseRequestPolicy {
    /**
     * Sends out request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof CredentialPolicy
     */
    sendRequest(request: WebResource): Promise<HttpOperationResponse>;
    /**
     * Child classes must implement this method with request signing. This method
     * will be executed in {@link sendRequest}.
     *
     * @protected
     * @abstract
     * @param {WebResource} request
     * @returns {WebResource}
     * @memberof CredentialPolicy
     */
    protected signRequest(request: WebResource): WebResource;
}
/**
 * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.
 */
export declare type CredentialPolicyCreator = (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => CredentialPolicy;
/**
 * The object returned in the QueueMessageList array when calling Get Messages on a Queue.
 */
export declare interface DequeuedMessageItem {
    /**
     * The Id of the Message.
     */
    messageId: string;
    /**
     * The time the Message was inserted into the Queue.
     */
    insertedOn: Date;
    /**
     * The time that the Message will expire and be automatically deleted.
     */
    expiresOn: Date;
    /**
     * This value is required to delete the Message. If deletion fails using this popreceipt then the
     * message has been dequeued by another client.
     */
    popReceipt: string;
    /**
     * The time that the message will again become visible in the Queue.
     */
    nextVisibleOn: Date;
    /**
     * The number of times the message has been dequeued.
     */
    dequeueCount: number;
    /**
     * The content of the Message.
     */
    messageText: string;
}
export { deserializationPolicy };
/**
 * The object returned in the QueueMessageList array when calling Put Message on a Queue
 */
export declare interface EnqueuedMessage {
    /**
     * The Id of the Message.
     */
    messageId: string;
    /**
     * The time the Message was inserted into the Queue.
     */
    insertedOn: Date;
    /**
     * The time that the Message will expire and be automatically deleted.
     */
    expiresOn: Date;
    /**
     * This value is required to delete the Message. If deletion fails using this popreceipt then the
     * message has been dequeued by another client.
     */
    popReceipt: string;
    /**
     * The time that the message will again become visible in the Queue.
     */
    nextVisibleOn: Date;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual
 * REST request.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
 *
 * @param {AccountSASSignatureValues} accountSASSignatureValues SAS Signature values of the account
 * @param {StorageSharedKeyCredential} sharedKeyCredential Shared key credential.
 * @returns {SASQueryParameters}
 * @memberof AccountSASSignatureValues
 */
export declare function generateAccountSASQueryParameters(accountSASSignatureValues: AccountSASSignatureValues, sharedKeyCredential: StorageSharedKeyCredential): SASQueryParameters;
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @export
 * @param {QueueSASSignatureValues} queueSASSignatureValues
 * @param {StorageSharedKeyCredential} sharedKeyCredential
 * @returns {SASQueryParameters}
 */
export declare function generateQueueSASQueryParameters(queueSASSignatureValues: QueueSASSignatureValues, sharedKeyCredential: StorageSharedKeyCredential): SASQueryParameters;
/**
 * An interface representing GeoReplication.
 */
export declare interface GeoReplication {
    /**
     * The status of the secondary location. Possible values include: 'live', 'bootstrap',
     * 'unavailable'
     */
    status: GeoReplicationStatusType;
    /**
     * A GMT date/time value, to the second. All primary writes preceding this value are guaranteed
     * to be available for read operations at the secondary. Primary writes after this point in time
     * may or may not be available for reads.
     */
    lastSyncOn: Date;
}
/**
 * Defines values for GeoReplicationStatusType.
 * Possible values include: 'live', 'bootstrap', 'unavailable'
 * @readonly
 * @enum {string}
 */
export declare type GeoReplicationStatusType = 'live' | 'bootstrap' | 'unavailable';
export { HttpHeaders };
export { HttpOperationResponse };
export { HttpRequestBody };
export { IHttpClient };
/**
 * Defines values for ListQueuesIncludeType.
 * Possible values include: 'metadata'
 * @readonly
 * @enum {string}
 */
export declare type ListQueuesIncludeType = 'metadata';
/**
 * The object returned when calling List Queues on a Queue Service.
 */
export declare interface ListQueuesSegmentResponse {
    serviceEndpoint: string;
    prefix: string;
    marker?: string;
    maxPageSize: number;
    queueItems?: QueueItem[];
    continuationToken: string;
}
/**
 * The @azure/logger configuration for this package.
 */
export declare const logger: import("@azure/logger").AzureLogger;
/**
 * Azure Analytics Logging settings.
 */
export declare interface Logging {
    /**
     * The version of Storage Analytics to configure.
     */
    version: string;
    /**
     * Indicates whether all delete requests should be logged.
     */
    deleteProperty: boolean;
    /**
     * Indicates whether all read requests should be logged.
     */
    read: boolean;
    /**
     * Indicates whether all write requests should be logged.
     */
    write: boolean;
    retentionPolicy: RetentionPolicy;
}
/**
 * Defines headers for Delete operation.
 */
export declare interface MessageIdDeleteHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the deleteMethod operation.
 */
export declare type MessageIdDeleteResponse = MessageIdDeleteHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessageIdDeleteHeaders;
    };
};
/**
 * Defines headers for Update operation.
 */
export declare interface MessageIdUpdateHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * The pop receipt of the queue message.
     */
    popReceipt?: string;
    /**
     * A UTC date/time value that represents when the message will be visible on the queue.
     */
    nextVisibleOn?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the update operation.
 */
export declare type MessageIdUpdateResponse = MessageIdUpdateHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessageIdUpdateHeaders;
    };
};
/**
 * Defines headers for Clear operation.
 */
export declare interface MessagesClearHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the clear operation.
 */
export declare type MessagesClearResponse = MessagesClearHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesClearHeaders;
    };
};
/**
 * Defines headers for Dequeue operation.
 */
export declare interface MessagesDequeueHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Optional Parameters.
 */
export declare interface MessagesDequeueOptionalParams extends coreHttp.RequestOptionsBase {
    /**
     * Optional. A nonzero integer value that specifies the number of messages to retrieve from the
     * queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By
     * default, a single message is retrieved from the queue with this operation.
     */
    numberOfMessages?: number;
    /**
     * Optional. Specifies the new visibility timeout value, in seconds, relative to server time. The
     * default value is 30 seconds. A specified value must be larger than or equal to 1 second, and
     * cannot be larger than 7 days, or larger than 2 hours on REST protocol versions prior to
     * version 2011-08-18. The visibility timeout of a message can be set to a value later than the
     * expiry time.
     */
    visibilityTimeout?: number;
    /**
     * The The timeout parameter is expressed in seconds. For more information, see <a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations>Setting
     * Timeouts for Queue Service Operations.</a>
     */
    timeoutInSeconds?: number;
    /**
     * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
     * analytics logs when storage analytics logging is enabled.
     */
    requestId?: string;
}
/**
 * Defines headers for Enqueue operation.
 */
export declare interface MessagesEnqueueHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Optional Parameters.
 */
export declare interface MessagesEnqueueOptionalParams extends coreHttp.RequestOptionsBase {
    /**
     * Optional. If specified, the request must be made using an x-ms-version of 2011-08-18 or later.
     * If not specified, the default value is 0. Specifies the new visibility timeout value, in
     * seconds, relative to server time. The new value must be larger than or equal to 0, and cannot
     * be larger than 7 days. The visibility timeout of a message cannot be set to a value later than
     * the expiry time. visibilitytimeout should be set to a value smaller than the time-to-live
     * value.
     */
    visibilityTimeout?: number;
    /**
     * Optional. Specifies the time-to-live interval for the message, in seconds. Prior to version
     * 2017-07-29, the maximum time-to-live allowed is 7 days. For version 2017-07-29 or later, the
     * maximum time-to-live can be any positive number, as well as -1 indicating that the message
     * does not expire. If this parameter is omitted, the default time-to-live is 7 days.
     */
    messageTimeToLive?: number;
    /**
     * The The timeout parameter is expressed in seconds. For more information, see <a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations>Setting
     * Timeouts for Queue Service Operations.</a>
     */
    timeoutInSeconds?: number;
    /**
     * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
     * analytics logs when storage analytics logging is enabled.
     */
    requestId?: string;
}
/**
 * Defines headers for Peek operation.
 */
export declare interface MessagesPeekHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Optional Parameters.
 */
export declare interface MessagesPeekOptionalParams extends coreHttp.RequestOptionsBase {
    /**
     * Optional. A nonzero integer value that specifies the number of messages to retrieve from the
     * queue, up to a maximum of 32. If fewer are visible, the visible messages are returned. By
     * default, a single message is retrieved from the queue with this operation.
     */
    numberOfMessages?: number;
    /**
     * The The timeout parameter is expressed in seconds. For more information, see <a
     * href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations>Setting
     * Timeouts for Queue Service Operations.</a>
     */
    timeoutInSeconds?: number;
    /**
     * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
     * analytics logs when storage analytics logging is enabled.
     */
    requestId?: string;
}
/**
 * A collection of key-value string pairs.
 */
export declare interface Metadata {
    /**
     * A key-value string pair.
     */
    [propertyName: string]: string;
}
/**
 * An interface representing Metrics.
 */
export declare interface Metrics {
    /**
     * The version of Storage Analytics to configure.
     */
    version?: string;
    /**
     * Indicates whether metrics are enabled for the Queue service.
     */
    enabled: boolean;
    /**
     * Indicates whether metrics should generate summary statistics for called API operations.
     */
    includeAPIs?: boolean;
    retentionPolicy?: RetentionPolicy;
}
/**
 * Creates a new Pipeline object with Credential provided.
 *
 * @static
 * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
 * @param {StoragePipelineOptions} [pipelineOptions] Options.
 * @returns {Pipeline} A new Pipeline object.
 * @memberof Pipeline
 */
export declare function newPipeline(credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, pipelineOptions?: StoragePipelineOptions): Pipeline;
/**
 * The object returned in the QueueMessageList array when calling Peek Messages on a Queue
 */
export declare interface PeekedMessageItem {
    /**
     * The Id of the Message.
     */
    messageId: string;
    /**
     * The time the Message was inserted into the Queue.
     */
    insertedOn: Date;
    /**
     * The time that the Message will expire and be automatically deleted.
     */
    expiresOn: Date;
    /**
     * The number of times the message has been dequeued.
     */
    dequeueCount: number;
    /**
     * The content of the Message.
     */
    messageText: string;
}
/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling newPipeline().
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 * Refer to newPipeline() and provided policies as reference before
 * implementing your customized Pipeline.
 *
 * @export
 * @class Pipeline
 */
export declare class Pipeline {
    /**
     * A list of chained request policy factories.
     *
     * @type {RequestPolicyFactory[]}
     * @memberof Pipeline
     */
    readonly factories: RequestPolicyFactory[];
    /**
     * Configures pipeline logger and HTTP client.
     *
     * @type {PipelineOptions}
     * @memberof Pipeline
     */
    readonly options: PipelineOptions;
    /**
     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
     *
     * @param {RequestPolicyFactory[]} factories
     * @param {PipelineOptions} [options={}]
     * @memberof Pipeline
     */
    constructor(factories: RequestPolicyFactory[], options?: PipelineOptions);
    /**
     * Transfers Pipeline object to ServiceClientOptions object which required by
     * ServiceClient constructor.
     *
     * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.
     * @memberof Pipeline
     */
    toServiceClientOptions(): ServiceClientOptions;
}
/**
 * Option interface for Pipeline constructor.
 *
 * @export
 * @interface PipelineOptions
 */
export declare interface PipelineOptions {
    /**
     * Optional. Configures the HTTP client to send requests and receive responses.
     *
     * @type {IHttpClient}
     * @memberof PipelineOptions
     */
    httpClient?: IHttpClient;
}
/**
 * Options to configure {@link QueueClient.clearMessages} operation
 *
 * @export
 * @interface QueueClearMessagesOptions
 */
export declare interface QueueClearMessagesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueClearMessagesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the {@link QueueClient.clearMessages} operation.
 */
export declare type QueueClearMessagesResponse = MessagesClearResponse;
/**
 * A QueueClient represents a URL to an Azure Storage Queue's messages allowing you to manipulate its messages.
 *
 * @export
 * @class QueueClient
 */
export declare class QueueClient extends StorageClient {
    /**
     * messagesContext provided by protocol layer.
     *
     * @private
     * @type {Messages}
     * @memberof QueueClient
     */
    private messagesContext;
    /**
     * queueContext provided by protocol layer.
     *
     * @private
     * @type {Queue}
     * @memberof QueueClient
     */
    private queueContext;
    private _name;
    private _messagesUrl;
    readonly name: string;
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {string} queueName Queue name.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueClient
     */
    constructor(connectionString: string, queueName: string, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue?sasString".
     * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueClient
     */
    constructor(url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue". You can
     *                     append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.queue.core.windows.net/myqueue?sasString".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof QueueClient
     */
    constructor(url: string, pipeline: Pipeline);
    private getMessageIdContext;
    /**
     * Creates a new queue under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
     *
     * @param {QueueCreateOptions} [options] Options to Queue create operation.
     * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.
     * @memberof QueueClient
     *
     * Example usage:
     *
     * ```js
     * const queueClient = queueServiceClient.getQueueClient("<new queue name>");
     * const createQueueResponse = await queueClient.create();
     * ```
     */
    create(options?: QueueCreateOptions): Promise<QueueCreateResponse>;
    /**
     * Creates a new queue under the specified account if it doesn't already exist.
     * If the queue already exists, it is not changed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
     *
     * @param {QueueCreateOptions} [options]
     * @returns {Promise<QueueCreateIfNotExistsResponse>}
     * @memberof QueueClient
     */
    createIfNotExists(options?: QueueCreateOptions): Promise<QueueCreateIfNotExistsResponse>;
    /**
     * Deletes the specified queue permanently if it exists.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
     *
     * @param {QueueDeleteOptions} [options]
     * @returns {Promise<QueueDeleteIfExistsResponse>}
     * @memberof QueueClient
     */
    deleteIfExists(options?: QueueDeleteOptions): Promise<QueueDeleteIfExistsResponse>;
    /**
     * Deletes the specified queue permanently.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
     *
     * @param {QueueDeleteOptions} [options] Options to Queue delete operation.
     * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.
     * @memberof QueueClient
     *
     * Example usage:
     *
     * ```js
     * const deleteQueueResponse = await queueClient.delete();
     * console.log(
     *   "Delete queue successfully, service assigned request Id:", deleteQueueResponse.requestId
     * );
     * ```
     */
    delete(options?: QueueDeleteOptions): Promise<QueueDeleteResponse>;
    /**
     * Returns true if the specified queue exists; false otherwise.
     *
     * NOTE: use this function with care since an existing queue might be deleted by other clients or
     * applications. Vice versa new queues might be added by other clients or applications after this
     * function completes.
     *
     * @param {QueueExistsOptions} [options] options to Exists operation.
     * @returns {Promise<boolean>}
     * @memberof QueueClient
     */
    exists(options?: QueueExistsOptions): Promise<boolean>;
    /**
     * Gets all user-defined metadata and system properties for the specified
     * queue. Metadata is associated with the queue as name-values pairs.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the `listQueues` method of {@link QueueServiceClient} using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param {QueueGetPropertiesOptions} [options] Options to Queue get properties operation.
     * @returns {Promise<QueueGetPropertiesResponse>} Response data for the Queue get properties operation.
     * @memberof QueueClient
     */
    getProperties(options?: QueueGetPropertiesOptions): Promise<QueueGetPropertiesResponse>;
    /**
     * Sets one or more user-defined name-value pairs for the specified queue.
     *
     * If no option provided, or no metadata defined in the option parameter, the queue
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata
     *
     * @param {Metadata} [metadata] If no metadata provided, all existing metadata will be removed.
     * @param {QueueSetMetadataOptions} [options] Options to Queue set metadata operation.
     * @returns {Promise<QueueSetMetadataResponse>} Response data for the Queue set metadata operation.
     * @memberof QueueClient
     */
    setMetadata(metadata?: Metadata, options?: QueueSetMetadataOptions): Promise<QueueSetMetadataResponse>;
    /**
     * Gets details about any stored access policies specified on the queue that may be used with Shared Access Signatures.
     *
     * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.
     * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-acl
     *
     * @param {QueueGetAccessPolicyOptions} [options] Options to Queue get access policy operation.
     * @returns {Promise<QueueGetAccessPolicyResponse>} Response data for the Queue get access policy operation.
     * @memberof QueueClient
     */
    getAccessPolicy(options?: QueueGetAccessPolicyOptions): Promise<QueueGetAccessPolicyResponse>;
    /**
     * Sets stored access policies for the queue that may be used with Shared Access Signatures.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
     *
     * @param {SignedIdentifier[]} [queueAcl]
     * @param {QueueSetAccessPolicyOptions} [options] Options to Queue set access policy operation.
     * @returns {Promise<QueueSetAccessPolicyResponse>} Response data for the Queue set access policy operation.
     * @memberof QueueClient
     */
    setAccessPolicy(queueAcl?: SignedIdentifier[], options?: QueueSetAccessPolicyOptions): Promise<QueueSetAccessPolicyResponse>;
    /**
     * Clear deletes all messages from a queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/clear-messages
     *
     * @param {QueueClearMessagesOptions} [options] Options to clear messages operation.
     * @returns {Promise<QueueClearMessagesResponse>} Response data for the clear messages operation.
     * @memberof QueueClient
     */
    clearMessages(options?: QueueClearMessagesOptions): Promise<QueueClearMessagesResponse>;
    /**
     * sendMessage adds a new message to the back of a queue. The visibility timeout specifies how long
     * the message should be invisible to Dequeue and Peek operations.
     * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.
     * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-message
     *
     * @param {string} messageText Text of the message to send
     * @param {QueueSendMessageOptions} [options] Options to send messages operation.
     * @returns {Promise<QueueSendMessageResponse>} Response data for the send messages operation.
     * @memberof QueueClient
     *
     * Example usage:
     *
     * ```js
     * const sendMessageResponse = await queueClient.sendMessage("Hello World!");
     * console.log(
     *   "Sent message successfully, service assigned message Id:", sendMessageResponse.messageId,
     *   "service assigned request Id:", sendMessageResponse.requestId
     * );
     * ```
     */
    sendMessage(messageText: string, options?: QueueSendMessageOptions): Promise<QueueSendMessageResponse>;
    /**
     * receiveMessages retrieves one or more messages from the front of the queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages
     *
     * @param {QueueReceiveMessageOptions} [options] Options to receive messages operation.
     * @returns {Promise<QueueReceiveMessageResponse>} Response data for the receive messages operation.
     * @memberof QueueClient
     *
     * Example usage:
     *
     * ```js
     * const response = await queueClient.receiveMessages();
     * if (response.receivedMessageItems.length == 1) {
     *   const receivedMessageItem = response.receivedMessageItems[0];
     *   console.log("Processing & deleting message with content:", receivedMessageItem.messageText);
     *   const deleteMessageResponse = await queueClient.deleteMessage(
     *     receivedMessageItem.messageId,
     *     receivedMessageItem.popReceipt
     *   );
     *   console.log(
     *     "Delete message successfully, service assigned request Id:",
     *     deleteMessageResponse.requestId
     *   );
     * }
     * ```
     */
    receiveMessages(options?: QueueReceiveMessageOptions): Promise<QueueReceiveMessageResponse>;
    /**
     * peekMessages retrieves one or more messages from the front of the queue but does not alter the visibility of the message.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/peek-messages
     *
     * @param {QueuePeekMessagesOptions} [options] Options to peek messages operation.
     * @returns {QueuePeekMessagesResponse>} Response data for the peek messages operation.
     * @memberof QueueClient
     *
     * Example usage:
     *
     * ```js
     * const peekMessagesResponse = await queueClient.peekMessages();
     * console.log("The peeked message is:", peekMessagesResponse.peekedMessageItems[0].messageText);
     * ```
     */
    peekMessages(options?: QueuePeekMessagesOptions): Promise<QueuePeekMessagesResponse>;
    /**
     * deleteMessage permanently removes the specified message from its queue.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-message2
     *
     * @param {string} messageId Id of the message.
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.
     * @param {QueueDeleteMessageOptions} [options] Options to delete message operation.
     * @returns {Promise<QueueDeleteMessageResponse>} Response data for the delete message operation.
     * @memberof QueueClient
     */
    deleteMessage(messageId: string, popReceipt: string, options?: QueueDeleteMessageOptions): Promise<QueueDeleteMessageResponse>;
    /**
     * Update changes a message's visibility timeout and contents.
     * The message content is up to 64KB in size, and must be in a format that can be included in an XML request with UTF-8 encoding.
     * To include markup in the message, the contents of the message must either be XML-escaped or Base64-encode.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/update-message
     *
     * @param {string} messageId Id of the message
     * @param {string} popReceipt A valid pop receipt value returned from an earlier call to the receive messages or update message operation.
     * @param {string} message Message to update. If this parameter is undefined, then the content of the message won't be updated.
     * @param {number} visibilityTimeout Specifies the new visibility timeout value, in seconds,
     *                                   relative to server time. The new value must be larger than or equal to 0,
     *                                   and cannot be larger than 7 days. The visibility timeout of a message cannot
     *                                   be set to a value later than the expiry time.
     *                                   A message can be updated until it has been deleted or has expired.
     * @param {QueueUpdateMessageOptions} [options] Options to update message operation.
     * @returns {Promise<QueueUpdateMessageResponse>} Response data for the update message operation.
     * @memberof QueueClient
     */
    updateMessage(messageId: string, popReceipt: string, message?: string, visibilityTimeout?: number, options?: QueueUpdateMessageOptions): Promise<QueueUpdateMessageResponse>;
    private getQueueNameFromUrl;
}
/**
 * Defines headers for Create operation.
 */
export declare interface QueueCreateHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the {@link QueueClient.createIfNotExists} operation.
 *
 * @export
 * @interface QueueCreateIfNotExistsResponse
 */
export declare interface QueueCreateIfNotExistsResponse extends QueueCreateResponse {
    /**
     * Indicate whether the queue is successfully created. Is false when the queue is not changed as it already exists.
     *
     * @type {boolean}
     * @memberof QueueCreateIfNotExistsResponse
     */
    succeeded: boolean;
}
/**
 * Options to configure {@link QueueClient.create} operation
 *
 * @export
 * @interface QueueCreateOptions
 */
export declare interface QueueCreateOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueCreateOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * A collection of key-value string pair to associate with the queue object.
     * The keys need to be lower-case.
     *
     * @type {Metadata}
     * @memberof QueueCreateOptions
     */
    metadata?: Metadata;
}
/**
 * Contains response data for the create operation.
 */
export declare type QueueCreateResponse = QueueCreateHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueCreateHeaders;
    };
};
/**
 * Defines headers for Delete operation.
 */
export declare interface QueueDeleteHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the {@link QueueClient.deleteIfExists} operation.
 *
 * @export
 * @interface QueueDeleteIfExistsResponse
 */
export declare interface QueueDeleteIfExistsResponse extends QueueDeleteResponse {
    /**
     * Indicate whether the queue is successfully deleted. Is false if the queue does not exist in the first place.
     *
     * @type {boolean}
     * @memberof QueueDeleteIfExistsResponse
     */
    succeeded: boolean;
}
/**
 * Options to configure the {@link QueueClient.deleteMessage} operation
 *
 * @export
 * @interface QueueDeleteMessageOptions
 */
export declare interface QueueDeleteMessageOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueDeleteMessageOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the {@link QueueClient.deleteMessage} operation.
 */
export declare type QueueDeleteMessageResponse = MessageIdDeleteResponse;
/**
 * Options to configure {@link QueueClient.delete} operation
 *
 * @export
 * @interface QueueDeleteOptions
 */
export declare interface QueueDeleteOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueDeleteOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the deleteMethod operation.
 */
export declare type QueueDeleteResponse = QueueDeleteHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueDeleteHeaders;
    };
};
/**
 * Options to configure {@link QueueClient.exists} operation
 *
 * @export
 * @interface QueueExistsOptions
 */
export declare interface QueueExistsOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueExistsOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Defines headers for GetAccessPolicy operation.
 */
export declare interface QueueGetAccessPolicyHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueClient.getAccessPolicy} operation
 *
 * @export
 * @interface QueueGetAccessPolicyOptions
 */
export declare interface QueueGetAccessPolicyOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueGetAccessPolicyOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the {@link QueueClient.getAccessPolicy} operation.
 */
export declare type QueueGetAccessPolicyResponse = {
    signedIdentifiers: SignedIdentifier[];
} & QueueGetAccessPolicyHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueGetAccessPolicyHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: SignedIdentifierModel[];
    };
};
/**
 * Defines headers for GetProperties operation.
 */
export declare interface QueueGetPropertiesHeaders {
    metadata?: {
        [propertyName: string]: string;
    };
    /**
     * The approximate number of messages in the queue. This number is not lower than the actual
     * number of messages in the queue, but could be higher.
     */
    approximateMessagesCount?: number;
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueClient.getProperties} operation
 *
 * @export
 * @interface QueueGetPropertiesOptions
 */
export declare interface QueueGetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueGetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the getProperties operation.
 */
export declare type QueueGetPropertiesResponse = QueueGetPropertiesHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueGetPropertiesHeaders;
    };
};
/**
 * An Azure Storage Queue.
 */
export declare interface QueueItem {
    /**
     * The name of the Queue.
     */
    name: string;
    metadata?: {
        [propertyName: string]: string;
    };
}
/**
 * Options to configure {@link QueueClient.peekMessages} operation
 *
 * @export
 * @interface QueuePeekMessagesOptions
 * @extends {MessagesPeekOptionalParams}
 */
export declare interface QueuePeekMessagesOptions extends MessagesPeekOptionalParams, CommonOptions {
}
/**
 * Contains the response data for the {@link QueueClient.peekMessages} operation.
 */
export declare type QueuePeekMessagesResponse = {
    peekedMessageItems: PeekedMessageItem[];
} & MessagesPeekHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesPeekHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: PeekedMessageItem[];
    };
};
/**
 * Options to configure {@link QueueClient.receiveMessages} operation
 *
 * @export
 * @interface QueueReceiveMessageOptions
 * @extends {MessagesDequeueOptionalParams}
 */
export declare interface QueueReceiveMessageOptions extends MessagesDequeueOptionalParams, CommonOptions {
}
/**
 * Contains the response data for the {@link QueueClient.receiveMessages} operation.
 */
export declare type QueueReceiveMessageResponse = {
    receivedMessageItems: ReceivedMessageItem[];
} & MessagesDequeueHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesDequeueHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ReceivedMessageItem[];
    };
};
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a Queue. Setting
 * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all
 * the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link QueueSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 *
 * @export
 * @class QueueSASPermissions
 */
export declare class QueueSASPermissions {
    /**
     * Creates a {@link QueueSASPermissions} from the specified permissions string. This method will throw an
     * Error if it encounters a character that does not correspond to a valid permission.
     *
     * @static
     * @param {string} permissions
     * @returns {QueueSASPermissions}
     * @memberof QueueSASPermissions
     */
    static parse(permissions: string): QueueSASPermissions;
    /**
     * Specifies Read access granted.
     *
     * @type {boolean}
     * @memberof QueueSASPermissions
     */
    read: boolean;
    /**
     * Specifies Add access granted.
     *
     * @type {boolean}
     * @memberof QueueSASPermissions
     */
    add: boolean;
    /**
     * Specifies Update access granted.
     *
     * @type {boolean}
     * @memberof QueueSASPermissions
     */
    update: boolean;
    /**
     * Specifies Process access granted.
     *
     * @type {boolean}
     * @memberof QueueSASPermissions
     */
    process: boolean;
    /**
     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
     * order accepted by the service.
     *
     * @returns {string} A string which represents the QueueSASPermissions
     * @memberof QueueSASPermissions
     */
    toString(): string;
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * QueueSASSignatureValues is used to help generating Queue service SAS tokens for queues.
 *
 * @export
 * @class QueueSASSignatureValues
 */
export declare interface QueueSASSignatureValues {
    /**
     * The version of the service this SAS will target. If not specified, it will default to the version targeted by the
     * library.
     *
     * @type {string}
     * @memberof QueueSASSignatureValues
     */
    version?: string;
    /**
     * Optional. SAS protocols, HTTPS only or HTTPSandHTTP
     *
     * @type {SASProtocol}
     * @memberof QueueSASSignatureValues
     */
    protocol?: SASProtocol;
    /**
     * Optional. When the SAS will take effect.
     *
     * @type {Date}
     * @memberof QueueSASSignatureValues
     */
    startsOn?: Date;
    /**
     * Optional only when identifier is provided. The time after which the SAS will no longer work.
     *
     * @type {Date}
     * @memberof QueueSASSignatureValues
     */
    expiresOn?: Date;
    /**
     * Optional only when identifier is provided.
     * Please refer to {@link QueueSASPermissions}
     * being accessed for help constructing the permissions string.
     *
     * @type {QueueSASPermissions}
     * @memberof QueueSASSignatureValues
     */
    permissions?: QueueSASPermissions;
    /**
     * Optional. IP ranges allowed in this SAS.
     *
     * @type {SasIPRange}
     * @memberof QueueSASSignatureValues
     */
    ipRange?: SasIPRange;
    /**
     * The name of the queue the SAS user may access.
     *
     * @type {string}
     * @memberof QueueSASSignatureValues
     */
    queueName: string;
    /**
     * Optional. The name of the access policy on the queue this SAS references if any.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy
     *
     * @type {string}
     * @memberof QueueSASSignatureValues
     */
    identifier?: string;
}
/**
 * Options to configure {@link QueueClient.sendMessage} operation
 *
 * @export
 * @interface QueueSendMessageOptions
 * @extends {MessagesEnqueueOptionalParams}
 */
export declare interface QueueSendMessageOptions extends MessagesEnqueueOptionalParams, CommonOptions {
}
/**
 * Contains the response data for the {@link QueueClient.sendMessage} operation.
 */
export declare type QueueSendMessageResponse = {
    /**
     * @member {string} messageId The ID of the sent Message.
     */
    messageId: string;
    /**
     * @member {string} popReceipt This value is required to delete the Message.
     * If deletion fails using this popreceipt then the message has been received
     * by another client.
     */
    popReceipt: string;
    /**
     * @member {Date} insertedOn The time that the message was inserted into the
     * Queue.
     */
    insertedOn: Date;
    /**
     * @member {Date} expiresOn The time that the message will expire and be
     * automatically deleted.
     */
    expiresOn: Date;
    /**
     * @member {Date} nextVisibleOn The time that the message will again become
     * visible in the Queue.
     */
    nextVisibleOn: Date;
} & MessagesEnqueueHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: MessagesEnqueueHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: EnqueuedMessage[];
    };
};
/**
 * A QueueServiceClient represents a URL to the Azure Storage Queue service allowing you
 * to manipulate queues.
 *
 * @export
 * @class QueueServiceClient
 */
export declare class QueueServiceClient extends StorageClient {
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @returns {QueueServiceClient} A new QueueServiceClient object from the given connection string.
     * @memberof QueueServiceClient
     */
    static fromConnectionString(connectionString: string, options?: StoragePipelineOptions): QueueServiceClient;
    /**
     * serviceContext provided by protocol layer.
     *
     * @private
     * @type {Service}
     * @memberof QueueServiceClient
     */
    private serviceContext;
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue service, such as
     *                     "https://myaccount.queue.core.windows.net". You can append a SAS
     *                     if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
     * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     * @param {StoragePipelineOptions} [options] Options to configure the HTTP pipeline.
     * @memberof QueueServiceClient
     *
     * Example using DefaultAzureCredential from `@azure/identity`:
     *
     * ```js
     * const account = "<account>";
     *
     * const credential = new DefaultAzureCredential();
     *
     * const queueServiceClient = new QueueServiceClient(
     *   `https://${account}.queue.core.windows.net`,
     *   credential
     * }
     * ```
     *
     * Example using an account name/key:
     *
     * ```js
     * const account = "<account>";
     *
     * const sharedKeyCredential = new StorageSharedKeyCredential(account, "<account key>");
     *
     * const queueServiceClient = new QueueServiceClient(
     *   `https://${account}.queue.core.windows.net`,
     *   sharedKeyCredential,
     *   {
     *     retryOptions: { maxTries: 4 }, // Retry options
     *     telemetry: { value: "BasicSample/V11.0.0" } // Customized telemetry string
     *   }
     * );
     * ```
     */
    constructor(url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions);
    /**
     * Creates an instance of QueueServiceClient.
     *
     * @param {string} url A URL string pointing to Azure Storage queue service, such as
     *                     "https://myaccount.queue.core.windows.net". You can append a SAS
     *                     if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof QueueServiceClient
     */
    constructor(url: string, pipeline: Pipeline);
    /**
     * Creates a {@link QueueClient} object.
     *
     * @param {string} queueName
     * @returns {QueueClient} a new QueueClient
     * @memberof QueueServiceClient
     *
     * Example usage:
     *
     * ```js
     * const queueClient = queueServiceClient.getQueueClient("<new queue name>");
     * const createQueueResponse = await queueClient.create();
     * ```
     */
    getQueueClient(queueName: string): QueueClient;
    /**
     * Returns a list of the queues under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1
     *
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of queues to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all queues remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {Promise<ServiceListQueuesSegmentResponse>} Response data for the list queues segment operation.
     * @memberof QueueServiceClient
     */
    private listQueuesSegment;
    /**
     * Returns an AsyncIterableIterator for {@link ServiceListQueuesSegmentResponse} objects
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of queues to be returned with the next listing operation. The
     *                        operation returns the continuationToken value within the response body if the
     *                        listing operation did not return all queues remaining to be listed
     *                        with the current page. The continuationToken value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {AsyncIterableIterator<ServiceListQueuesSegmentResponse>}
     * @memberof QueueServiceClient
     */
    private listSegments;
    /**
     * Returns an AsyncIterableIterator for {@link QueueItem} objects
     *
     * @private
     * @param {ServiceListQueuesSegmentOptions} [options] Options to list queues operation.
     * @returns {AsyncIterableIterator<QueueItem>}
     * @memberof QueueServiceClient
     */
    private listItems;
    /**
     * Returns an async iterable iterator to list all the queues
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the queues in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const item of queueServiceClient.listQueues()) {
     *   console.log(`Queue${i}: ${item.name}`);
     *   i++;
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iterator = queueServiceClient.listQueues();
     * let item = await iterator.next();
     * while (!item.done) {
     *   console.log(`Queue${i}: ${iterator.value.name}`);
     *   i++;
     *   item = await iterator.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const item2 of queueServiceClient.listQueues().byPage({ maxPageSize: 20 })) {
     *   if (item2.queueItems) {
     *     for (const queueItem of item2.queueItems) {
     *       console.log(`Queue${i}: ${queueItem.name}`);
     *       i++;
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });
     * let item = (await iterator.next()).value;
     *
     * // Prints 2 queue names
     * if (item.queueItems) {
     *   for (const queueItem of item.queueItems) {
     *     console.log(`Queue${i}: ${queueItem.name}`);
     *     i++;
     *   }
     * }
     * // Gets next marker
     * let marker = item.continuationToken;
     *
     * // Passing next marker as continuationToken
     * iterator = queueServiceClient.listQueues().byPage({ continuationToken: marker, maxPageSize: 10 });
     * item = (await iterator.next()).value;
     *
     * // Prints 10 queue names
     * if (item.queueItems) {
     *   for (const queueItem of item.queueItems) {
     *     console.log(`Queue${i}: ${queueItem.name}`);
     *     i++;
     *   }
     * }
     * ```
     *
     * @param {ServiceListQueuesOptions} [options] Options to list queues operation.
     * @memberof QueueServiceClient
     * @returns {PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>} An asyncIterableIterator that supports paging.
     */
    listQueues(options?: ServiceListQueuesOptions): PagedAsyncIterableIterator<QueueItem, ServiceListQueuesSegmentResponse>;
    /**
     * Gets the properties of a storage account’s Queue service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-properties
     *
     * @param {ServiceGetPropertiesOptions} [options] Options to get properties operation.
     * @returns {Promise<ServiceGetPropertiesResponse>} Response data including the queue service properties.
     * @memberof QueueServiceClient
     */
    getProperties(options?: ServiceGetPropertiesOptions): Promise<ServiceGetPropertiesResponse>;
    /**
     * Sets properties for a storage account’s Queue service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-service-properties
     *
     * @param {QueueServiceProperties} properties
     * @param {ServiceGetPropertiesOptions} [options] Options to set properties operation.
     * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Set Properties operation.
     * @memberof QueueServiceClient
     */
    setProperties(properties: QueueServiceProperties, options?: ServiceGetPropertiesOptions): Promise<ServiceSetPropertiesResponse>;
    /**
     * Retrieves statistics related to replication for the Queue service. It is only
     * available on the secondary location endpoint when read-access geo-redundant
     * replication is enabled for the storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-queue-service-stats
     *
     * @param {ServiceGetStatisticsOptions} [options] Options to get statistics operation.
     * @returns {Promise<ServiceGetStatisticsResponse>} Response data for get statistics the operation.
     * @memberof QueueServiceClient
     */
    getStatistics(options?: ServiceGetStatisticsOptions): Promise<ServiceGetStatisticsResponse>;
    /**
     * Creates a new queue under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-queue4
     *
     * @param {string} queueName name of the queue to create
     * @param {QueueCreateOptions} [options] Options to Queue create operation.
     * @returns {Promise<QueueCreateResponse>} Response data for the Queue create operation.
     * @memberof QueueServiceClient
     */
    createQueue(queueName: string, options?: QueueCreateOptions): Promise<QueueCreateResponse>;
    /**
     * Deletes the specified queue permanently.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-queue3
     *
     * @param {string} queueName name of the queue to delete.
     * @param {QueueDeleteOptions} [options] Options to Queue delete operation.
     * @returns {Promise<QueueDeleteResponse>} Response data for the Queue delete operation.
     * @memberof QueueServiceClient
     */
    deleteQueue(queueName: string, options?: QueueDeleteOptions): Promise<QueueDeleteResponse>;
}
/**
 * Storage Service Properties.
 */
export declare interface QueueServiceProperties {
    /**
     * Azure Analytics Logging settings
     */
    queueAnalyticsLogging?: Logging;
    /**
     * A summary of request statistics grouped by API in hourly aggregates for queues
     */
    hourMetrics?: Metrics;
    /**
     * a summary of request statistics grouped by API in minute aggregates for queues
     */
    minuteMetrics?: Metrics;
    /**
     * The set of CORS rules.
     */
    cors?: CorsRule[];
}
/**
 * Stats for the storage service.
 */
export declare interface QueueServiceStatistics {
    /**
     * Geo-Replication information for the Secondary Storage Service
     */
    geoReplication?: GeoReplication;
}
/**
 * Defines headers for SetAccessPolicy operation.
 */
export declare interface QueueSetAccessPolicyHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueClient.setAccessPolicy} operation
 *
 * @export
 * @interface QueueSetAccessPolicyOptions
 */
export declare interface QueueSetAccessPolicyOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueSetAccessPolicyOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the setAccessPolicy operation.
 */
export declare type QueueSetAccessPolicyResponse = QueueSetAccessPolicyHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueSetAccessPolicyHeaders;
    };
};
/**
 * Defines headers for SetMetadata operation.
 */
export declare interface QueueSetMetadataHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueClient.setMetadata} operation
 *
 * @export
 * @interface QueueSetMetadataOptions
 */
export declare interface QueueSetMetadataOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueSetMetadataOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the setMetadata operation.
 */
export declare type QueueSetMetadataResponse = QueueSetMetadataHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: QueueSetMetadataHeaders;
    };
};
/**
 * Options to configure {@link QueueClient.updateMessage} operation
 *
 * @export
 * @interface QueueUpdateMessageOptions
 */
export declare interface QueueUpdateMessageOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof QueueUpdateMessageOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the {@link QueueClient.updateMessage} operation.
 */
export declare type QueueUpdateMessageResponse = MessageIdUpdateResponse;
/**
 * The object returned in the `receivedMessageItems` array when calling {@link QueueClient.receiveMessages}.
 *
 * See: {@link QueueReceiveMessageResponse}
 */
export declare type ReceivedMessageItem = DequeuedMessageItem;
export { RequestPolicy };
export { RequestPolicyFactory };
export { RequestPolicyOptions };
export { RestError };
/**
 * the retention policy
 */
export declare interface RetentionPolicy {
    /**
     * Indicates whether a retention policy is enabled for the storage service
     */
    enabled: boolean;
    /**
     * Indicates the number of days that metrics or logging or soft-deleted data should be retained.
     * All data older than this value will be deleted
     */
    days?: number;
}
/**
 * Allowed IP range for a SAS.
 *
 * @export
 * @interface SasIPRange
 */
export declare interface SasIPRange {
    /**
     * Starting IP address in the IP range.
     * If end IP doesn't provide, start IP will the only IP allowed.
     *
     * @type {string}
     * @memberof SasIPRange
     */
    start: string;
    /**
     * Optional. IP address that ends the IP range.
     * If not provided, start IP will the only IP allowed.
     *
     * @type {string}
     * @memberof SasIPRange
     */
    end?: string;
}
/**
 * Protocols for generated SAS.
 *
 * @export
 * @enum {string}
 */
export declare enum SASProtocol {
    /**
     * Protocol that allows HTTPS only
     */
    Https = "https",
    /**
     * Protocol that allows both HTTPS and HTTP
     */
    HttpsAndHttp = "https,http"
}
/**
 * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly
 * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link QueueSASSignatureValues}
 * types. Once generated, it can be encoded into a {@code String} and appended to a URL directly (though caution should
 * be taken here in case there are existing query parameters, which might affect the appropriate means of appending
 * these query parameters).
 *
 * NOTE: Instances of this class are immutable.
 *
 * @export
 * @class SASQueryParameters
 */
export declare class SASQueryParameters {
    /**
     * The storage API version.
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly version: string;
    /**
     * Optional. The allowed HTTP protocol(s).
     *
     * @type {SASProtocol}
     * @memberof SASQueryParameters
     */
    readonly protocol?: SASProtocol;
    /**
     * Optional. The start time for this SAS token.
     *
     * @type {Date}
     * @memberof SASQueryParameters
     */
    readonly startsOn?: Date;
    /**
     * Optional only when identifier is provided. The expiry time for this SAS token.
     *
     * @type {Date}
     * @memberof SASQueryParameters
     */
    readonly expiresOn?: Date;
    /**
     * Optional only when identifier is provided.
     * Please refer to {@link AccountSASPermissions}, {@link QueueSASPermissions} for more details.
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly permissions?: string;
    /**
     * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}
     * for more details.
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly services?: string;
    /**
     * Optional. The storage resource types being accessed (only for Account SAS). Please refer to
     * {@link AccountSASResourceTypes} for more details.
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly resourceTypes?: string;
    /**
     * Optional. The signed identifier (only for {@link QueueSASSignatureValues}).
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly identifier?: string;
    /**
     * Optional. The storage queue (only for {@link QueueSASSignatureValues}).
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly resource?: string;
    /**
     * The signature for the SAS token.
     *
     * @type {string}
     * @memberof SASQueryParameters
     */
    readonly signature: string;
    /**
     * Inner value of getter ipRange.
     *
     * @private
     * @type {SasIPRange}
     * @memberof SASQueryParameters
     */
    private readonly ipRangeInner?;
    readonly ipRange: SasIPRange | undefined;
    /**
     * Creates an instance of SASQueryParameters.
     *
     * @param {string} version Representing the storage version
     * @param {string} signature Representing the signature for the SAS token
     * @param {string} [permissions] Representing the storage permissions
     * @param {string} [services] Representing the storage services being accessed (only for Account SAS)
     * @param {string} [resourceTypes] Representing the storage resource types being accessed (only for Account SAS)
     * @param {SASProtocol} [protocol] Representing the allowed HTTP protocol(s)
     * @param {Date} [startsOn] Representing the start time for this SAS token
     * @param {Date} [expiresOn] Representing the expiry time for this SAS token
     * @param {SasIPRange} [ipRange] Representing the range of valid IP addresses for this SAS token
     * @param {string} [identifier] Representing the signed identifier (only for Service SAS)
     * @param {string} [resource] Representing the storage queue (only for Service SAS)
     */
    constructor(version: string, signature: string, permissions?: string, services?: string, resourceTypes?: string, protocol?: SASProtocol, startsOn?: Date, expiresOn?: Date, ipRange?: SasIPRange, identifier?: string, resource?: string);
    /**
     * Encodes all SAS query parameters into a string that can be appended to a URL.
     *
     * @returns {string}
     * @memberof SASQueryParameters
     */
    toString(): string;
    /**
     * A private helper method used to filter and append query key/value pairs into an array.
     *
     * @private
     * @param {string[]} queries
     * @param {string} key
     * @param {string} [value]
     * @returns {void}
     * @memberof SASQueryParameters
     */
    private tryAppendQueryParameter;
}
/**
 * Defines headers for GetProperties operation.
 */
export declare interface ServiceGetPropertiesHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueServiceClient.getProperties} operation
 *
 * @export
 * @interface ServiceGetPropertiesOptions
 */
export declare interface ServiceGetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceGetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the getProperties operation.
 */
export declare type ServiceGetPropertiesResponse = QueueServiceProperties & ServiceGetPropertiesHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: ServiceGetPropertiesHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: QueueServiceProperties;
    };
};
/**
 * Defines headers for GetStatistics operation.
 */
export declare interface ServiceGetStatisticsHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueServiceClient.getStatistics} operation
 *
 * @export
 * @interface ServiceGetStatisticsOptions
 */
export declare interface ServiceGetStatisticsOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceGetStatisticsOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the getStatistics operation.
 */
export declare type ServiceGetStatisticsResponse = QueueServiceStatistics & ServiceGetStatisticsHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: ServiceGetStatisticsHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: QueueServiceStatistics;
    };
};
/**
 * Options to configure {@link QueueServiceClient.listQueues} operation
 *
 * @export
 * @interface ServiceListQueuesOptions
 */
export declare interface ServiceListQueuesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceListQueuesOptions
     */
    abortSignal?: AbortSignalLike;
    /**
     * Filters the results to return only queues
     * whose name begins with the specified prefix.
     */
    prefix?: string;
    /**
     * Specifies whether the queue's metadata be returned as part of the response
     * body.
     */
    includeMetadata?: boolean;
}
/**
 * Defines headers for ListQueuesSegment operation.
 */
export declare interface ServiceListQueuesSegmentHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * UTC date/time value generated by the service that indicates the time at which the response was
     * initiated
     */
    date?: Date;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Contains response data for the listQueuesSegment operation.
 */
export declare type ServiceListQueuesSegmentResponse = ListQueuesSegmentResponse & ServiceListQueuesSegmentHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: ServiceListQueuesSegmentHeaders;
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ListQueuesSegmentResponse;
    };
};
/**
 * Defines headers for SetProperties operation.
 */
export declare interface ServiceSetPropertiesHeaders {
    /**
     * This header uniquely identifies the request that was made and can be used for troubleshooting
     * the request.
     */
    requestId?: string;
    /**
     * Indicates the version of the Queue service used to execute the request. This header is
     * returned for requests made against version 2009-09-19 and above.
     */
    version?: string;
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     */
    clientRequestId?: string;
    errorCode?: string;
}
/**
 * Options to configure {@link QueueServiceClient.setProperties} operation
 *
 * @export
 * @interface ServiceSetPropertiesOptions
 */
export declare interface ServiceSetPropertiesOptions extends CommonOptions {
    /**
     * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.
     * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.
     *
     * @type {AbortSignalLike}
     * @memberof ServiceSetPropertiesOptions
     */
    abortSignal?: AbortSignalLike;
}
/**
 * Contains response data for the setProperties operation.
 */
export declare type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: ServiceSetPropertiesHeaders;
    };
};
/**
 * Signed identifier.
 *
 * @export
 * @interface SignedIdentifier
 */
export declare interface SignedIdentifier {
    /**
     * @member {string} id a unique id
     */
    id: string;
    /**
     * @member {AccessPolicy} accessPolicy
     */
    accessPolicy: {
        /**
         * @member {Date} startsOn the date-time the policy is active.
         */
        startsOn?: Date;
        /**
         * @member {string} expiresOn the date-time the policy expires.
         */
        expiresOn?: Date;
        /**
         * @member {string} permission the permissions for the acl policy
         * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
         */
        permissions?: string;
    };
}
/**
 * signed identifier
 */
export declare interface SignedIdentifierModel {
    /**
     * a unique id
     */
    id: string;
    /**
     * The access policy
     */
    accessPolicy: AccessPolicy;
}
/**
 * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
 *
 * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
 * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
 * thus avoid the browser cache.
 *
 * 2. Remove cookie header for security
 *
 * 3. Remove content-length header to avoid browsers warning
 *
 * @class StorageBrowserPolicy
 * @extends {BaseRequestPolicy}
 */
export declare class StorageBrowserPolicy extends BaseRequestPolicy {
    /**
     * Creates an instance of StorageBrowserPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @memberof StorageBrowserPolicy
     */
    constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions);
    /**
     * Sends out request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageBrowserPolicy
     */
    sendRequest(request: WebResource): Promise<HttpOperationResponse>;
}
/**
 * StorageBrowserPolicyFactory is a factory class helping generating {@link StorageBrowserPolicy} objects.
 *
 * @export
 * @class StorageBrowserPolicyFactory
 * @implements {RequestPolicyFactory}
 */
export declare class StorageBrowserPolicyFactory implements RequestPolicyFactory {
    /**
     * Creates a StorageBrowserPolicyFactory object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {StorageBrowserPolicy}
     * @memberof StorageBrowserPolicyFactory
     */
    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageBrowserPolicy;
}
/**
 * A StorageClient represents a based client class for {@link QueueServiceClient}, {@link QueueClient} and etc.
 *
 * @export
 * @class StorageClient
 */
declare abstract class StorageClient {
    /**
     * URL string value.
     *
     * @type {string}
     * @memberof StorageClient
     */
    readonly url: string;
    readonly accountName: string;
    /* Excluded from this release type: pipeline */
    /**
     * StorageClientContext is a reference to protocol layer operations entry, which is
     * generated by AutoRest generator.
     *
     * @protected
     * @type {StorageClientContext}
     * @memberof StorageClient
     */
    protected readonly storageClientContext: StorageClientContext;
    /**
     * Creates an instance of StorageClient.
     * @param {string} url
     * @param {Pipeline} pipeline
     * @memberof StorageClient
     */
    protected constructor(url: string, pipeline: Pipeline);
}
declare class StorageClientContext extends coreHttp.ServiceClient {
    url: string;
    version: string;
    /**
     * Initializes a new instance of the StorageClientContext class.
     * @param url The URL of the service account, queue or message that is the targe of the desired
     * operation.
     * @param [options] The parameter options
     */
    constructor(url: string, options?: coreHttp.ServiceClientOptions);
}
/**
 * The OAuth scope to use with Azure Storage.
 */
export declare const StorageOAuthScopes: string | string[];
/**
 * Option interface for newPipeline() method.
 *
 * @export
 * @interface StoragePipelineOptions
 */
export declare interface StoragePipelineOptions {
    /**
     * Options to configure a proxy for outgoing requests.
     */
    proxyOptions?: ProxyOptions;
    /**
     * Options for adding user agent details to outgoing requests.
     *
     * @type {UserAgentOptions}
     * @memberof StoragePipelineOptions
     */
    userAgentOptions?: UserAgentOptions;
    /**
     * Configures the built-in retry policy behavior.
     *
     * @type {RetryOptions}
     * @memberof StoragePipelineOptions
     */
    retryOptions?: StorageRetryOptions;
    /**
     * Keep alive configurations. Default keep-alive is enabled.
     *
     * @type {KeepAliveOptions}
     * @memberof StoragePipelineOptions
     */
    keepAliveOptions?: KeepAliveOptions;
    /**
     * Configures the HTTP client to send requests and receive responses.
     *
     * @type {IHttpClient}
     * @memberof StoragePipelineOptions
     */
    httpClient?: IHttpClient;
}
/**
 * Storage Queue retry options interface.
 *
 * @export
 * @interface StorageRetryOptions
 */
export declare interface StorageRetryOptions {
    /**
     * Optional. StorageRetryPolicyType, default is exponential retry policy.
     *
     * @type {StorageRetryPolicyType}
     * @memberof StorageRetryOptions
     */
    readonly retryPolicyType?: StorageRetryPolicyType;
    /**
     * Optional. Max try number of attempts, default is 4.
     * A value of 1 means 1 try and no retries.
     * A value smaller than 1 means default retry number of attempts.
     *
     * @type {number}
     * @memberof StorageRetryOptions
     */
    readonly maxTries?: number;
    /**
     * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.
     * A value of zero or undefined means that you accept our default timeout, 30s or 30 * 1000ms.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations
     *
     * @type {number}
     * @memberof StorageRetryOptions
     */
    readonly tryTimeoutInMs?: number;
    /**
     * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).
     * The delay increases (exponentially or linearly) with each retry up to a maximum specified by
     * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.
     *
     * @type {number}
     * @memberof StorageRetryOptions
     */
    readonly retryDelayInMs?: number;
    /**
     * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).
     * If you specify 0, then you must also specify 0 for retryDelayInMs.
     *
     * @type {number}
     * @memberof StorageRetryOptions
     */
    readonly maxRetryDelayInMs?: number;
    /**
     * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined
     * (the default) then operations are not retried against another host.
     *
     * NOTE: Before setting this field, make sure you understand the issues around
     * reading stale and potentially-inconsistent data at
     * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}
     *
     * @type {string}
     * @memberof StorageRetryOptions
     */
    readonly secondaryHost?: string;
}
/**
 * Retry policy with exponential retry and linear retry implemented.
 *
 * @class RetryPolicy
 * @extends {BaseRequestPolicy}
 */
export declare class StorageRetryPolicy extends BaseRequestPolicy {
    /**
     * RetryOptions.
     *
     * @private
     * @type {RetryOptions}
     * @memberof StorageRetryPolicy
     */
    private readonly retryOptions;
    /**
     * Creates an instance of RetryPolicy.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @param {RetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]
     * @memberof StorageRetryPolicy
     */
    constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryOptions?: StorageRetryOptions);
    /**
     * Sends request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageRetryPolicy
     */
    sendRequest(request: WebResource): Promise<HttpOperationResponse>;
    /**
     * Decide and perform next retry. Won't mutate request parameter.
     *
     * @protected
     * @param {WebResource} request
     * @param {HttpOperationResponse} response
     * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then
     *                                   the resource was not found. This may be due to replication delay. So, in this
     *                                   case, we'll never try the secondary again for this operation.
     * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes
     *                                   the attempt will be performed by this method call.
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageRetryPolicy
     */
    protected attemptSendRequest(request: WebResource, secondaryHas404: boolean, attempt: number): Promise<HttpOperationResponse>;
    /**
     * Decide whether to retry according to last HTTP response and retry counters.
     *
     * @protected
     * @param {boolean} isPrimaryRetry
     * @param {number} attempt
     * @param {HttpOperationResponse} [response]
     * @param {RestError} [err]
     * @returns {boolean}
     * @memberof StorageRetryPolicy
     */
    protected shouldRetry(isPrimaryRetry: boolean, attempt: number, response?: HttpOperationResponse, err?: RestError): boolean;
    /**
     * Delay a calculated time between retries.
     *
     * @private
     * @param {boolean} isPrimaryRetry
     * @param {number} attempt
     * @param {AbortSignalLike} [abortSignal]
     * @memberof StorageRetryPolicy
     */
    private delay;
}
/**
 * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
 *
 * @export
 * @class StorageRetryPolicyFactory
 * @implements {RequestPolicyFactory}
 */
export declare class StorageRetryPolicyFactory implements RequestPolicyFactory {
    private retryOptions?;
    /**
     * Creates an instance of StorageRetryPolicyFactory.
     * @param {StorageRetryOptions} [retryOptions]
     * @memberof StorageRetryPolicyFactory
     */
    constructor(retryOptions?: StorageRetryOptions);
    /**
     * Creates a {@link StorageRetryPolicy} object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {StorageRetryPolicy}
     * @memberof StorageRetryPolicyFactory
     */
    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy;
}
/**
 * RetryPolicy types.
 *
 * @export
 * @enum {number}
 */
export declare enum StorageRetryPolicyType {
    /**
     * Exponential retry. Retry time delay grows exponentially.
     */
    EXPONENTIAL = 0,
    /**
     * Linear retry. Retry time delay grows linearly.
     */
    FIXED = 1
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * StorageSharedKeyCredential for account key authorization of Azure Storage service.
 *
 * @export
 * @class StorageSharedKeyCredential
 * @extends {Credential}
 */
export declare class StorageSharedKeyCredential extends Credential {
    /**
     * Azure Storage account name; readonly.
     *
     * @type {string}
     * @memberof StorageSharedKeyCredential
     */
    readonly accountName: string;
    /**
     * Azure Storage account key; readonly.
     *
     * @type {Buffer}
     * @memberof StorageSharedKeyCredential
     */
    private readonly accountKey;
    /**
     * Creates an instance of StorageSharedKeyCredential.
     * @param {string} accountName
     * @param {string} accountKey
     * @memberof StorageSharedKeyCredential
     */
    constructor(accountName: string, accountKey: string);
    /**
     * Creates a {@link StorageSharedKeyCredentialPolicy} object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {StorageSharedKeyCredentialPolicy}
     * @memberof StorageSharedKeyCredential
     */
    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageSharedKeyCredentialPolicy;
    /**
     * Generates a hash signature for an HTTP request or for a SAS.
     *
     * @param {string} stringToSign
     * @returns {string}
     * @memberof StorageSharedKeyCredential
     */
    computeHMACSHA256(stringToSign: string): string;
}
/**
 * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.
 *
 * @export
 * @class StorageSharedKeyCredentialPolicy
 * @extends {CredentialPolicy}
 */
export declare class StorageSharedKeyCredentialPolicy extends CredentialPolicy {
    /**
     * Reference to {@link StorageSharedKeyCredential} which generates StorageSharedKeyCredentialPolicy
     *
     * @type {StorageSharedKeyCredential}
     * @memberof StorageSharedKeyCredentialPolicy
     */
    private readonly factory;
    /**
     * Creates an instance of StorageSharedKeyCredentialPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @param {StorageSharedKeyCredential} factory
     * @memberof StorageSharedKeyCredentialPolicy
     */
    constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, factory: StorageSharedKeyCredential);
    /**
     * Signs request.
     *
     * @protected
     * @param {WebResource} request
     * @returns {WebResource}
     * @memberof StorageSharedKeyCredentialPolicy
     */
    protected signRequest(request: WebResource): WebResource;
    /**
     * Retrieve header value according to shared key sign rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key
     *
     * @private
     * @param {WebResource} request
     * @param {string} headerName
     * @returns {string}
     * @memberof StorageSharedKeyCredentialPolicy
     */
    private getHeaderValueToSign;
    /**
     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:
     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.
     * 2. Convert each HTTP header name to lowercase.
     * 3. Sort the headers lexicographically by header name, in ascending order.
     *    Each header may appear only once in the string.
     * 4. Replace any linear whitespace in the header value with a single space.
     * 5. Trim any whitespace around the colon in the header.
     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.
     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.
     *
     * @private
     * @param {WebResource} request
     * @returns {string}
     * @memberof StorageSharedKeyCredentialPolicy
     */
    private getCanonicalizedHeadersString;
    /**
     * Retrieves the webResource canonicalized resource string.
     *
     * @private
     * @param {WebResource} request
     * @returns {string}
     * @memberof StorageSharedKeyCredentialPolicy
     */
    private getCanonicalizedResourceString;
}
export { WebResource };
export {};
